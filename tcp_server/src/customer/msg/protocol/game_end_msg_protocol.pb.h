// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: game_end_msg_protocol.proto

#ifndef PROTOBUF_game_5fend_5fmsg_5fprotocol_2eproto__INCLUDED
#define PROTOBUF_game_5fend_5fmsg_5fprotocol_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2006000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
#include "player_cards_msg_protocol.pb.h"
// @@protoc_insertion_point(includes)

namespace gamer {
namespace protocol {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_game_5fend_5fmsg_5fprotocol_2eproto();
void protobuf_AssignDesc_game_5fend_5fmsg_5fprotocol_2eproto();
void protobuf_ShutdownFile_game_5fend_5fmsg_5fprotocol_2eproto();

class GameEndDataMsgProtocol;
class GameEndMsgProtocol;

// ===================================================================

class GameEndDataMsgProtocol : public ::google::protobuf::Message {
 public:
  GameEndDataMsgProtocol();
  virtual ~GameEndDataMsgProtocol();

  GameEndDataMsgProtocol(const GameEndDataMsgProtocol& from);

  inline GameEndDataMsgProtocol& operator=(const GameEndDataMsgProtocol& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GameEndDataMsgProtocol& default_instance();

  void Swap(GameEndDataMsgProtocol* other);

  // implements Message ----------------------------------------------

  GameEndDataMsgProtocol* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GameEndDataMsgProtocol& from);
  void MergeFrom(const GameEndDataMsgProtocol& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 player_id = 1;
  inline bool has_player_id() const;
  inline void clear_player_id();
  static const int kPlayerIdFieldNumber = 1;
  inline ::google::protobuf::int32 player_id() const;
  inline void set_player_id(::google::protobuf::int32 value);

  // required string nick_name = 2;
  inline bool has_nick_name() const;
  inline void clear_nick_name();
  static const int kNickNameFieldNumber = 2;
  inline const ::std::string& nick_name() const;
  inline void set_nick_name(const ::std::string& value);
  inline void set_nick_name(const char* value);
  inline void set_nick_name(const char* value, size_t size);
  inline ::std::string* mutable_nick_name();
  inline ::std::string* release_nick_name();
  inline void set_allocated_nick_name(::std::string* nick_name);

  // required int32 score = 3;
  inline bool has_score() const;
  inline void clear_score();
  static const int kScoreFieldNumber = 3;
  inline ::google::protobuf::int32 score() const;
  inline void set_score(::google::protobuf::int32 value);

  // required int32 total_score = 4;
  inline bool has_total_score() const;
  inline void clear_total_score();
  static const int kTotalScoreFieldNumber = 4;
  inline ::google::protobuf::int32 total_score() const;
  inline void set_total_score(::google::protobuf::int32 value);

  // repeated .gamer.protocol.PlayerCardsMsgProtocol player_cards = 5;
  inline int player_cards_size() const;
  inline void clear_player_cards();
  static const int kPlayerCardsFieldNumber = 5;
  inline const ::gamer::protocol::PlayerCardsMsgProtocol& player_cards(int index) const;
  inline ::gamer::protocol::PlayerCardsMsgProtocol* mutable_player_cards(int index);
  inline ::gamer::protocol::PlayerCardsMsgProtocol* add_player_cards();
  inline const ::google::protobuf::RepeatedPtrField< ::gamer::protocol::PlayerCardsMsgProtocol >&
      player_cards() const;
  inline ::google::protobuf::RepeatedPtrField< ::gamer::protocol::PlayerCardsMsgProtocol >*
      mutable_player_cards();

  // @@protoc_insertion_point(class_scope:gamer.protocol.GameEndDataMsgProtocol)
 private:
  inline void set_has_player_id();
  inline void clear_has_player_id();
  inline void set_has_nick_name();
  inline void clear_has_nick_name();
  inline void set_has_score();
  inline void clear_has_score();
  inline void set_has_total_score();
  inline void clear_has_total_score();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* nick_name_;
  ::google::protobuf::int32 player_id_;
  ::google::protobuf::int32 score_;
  ::google::protobuf::RepeatedPtrField< ::gamer::protocol::PlayerCardsMsgProtocol > player_cards_;
  ::google::protobuf::int32 total_score_;
  friend void  protobuf_AddDesc_game_5fend_5fmsg_5fprotocol_2eproto();
  friend void protobuf_AssignDesc_game_5fend_5fmsg_5fprotocol_2eproto();
  friend void protobuf_ShutdownFile_game_5fend_5fmsg_5fprotocol_2eproto();

  void InitAsDefaultInstance();
  static GameEndDataMsgProtocol* default_instance_;
};
// -------------------------------------------------------------------

class GameEndMsgProtocol : public ::google::protobuf::Message {
 public:
  GameEndMsgProtocol();
  virtual ~GameEndMsgProtocol();

  GameEndMsgProtocol(const GameEndMsgProtocol& from);

  inline GameEndMsgProtocol& operator=(const GameEndMsgProtocol& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GameEndMsgProtocol& default_instance();

  void Swap(GameEndMsgProtocol* other);

  // implements Message ----------------------------------------------

  GameEndMsgProtocol* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GameEndMsgProtocol& from);
  void MergeFrom(const GameEndMsgProtocol& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 room_id = 1;
  inline bool has_room_id() const;
  inline void clear_room_id();
  static const int kRoomIdFieldNumber = 1;
  inline ::google::protobuf::int32 room_id() const;
  inline void set_room_id(::google::protobuf::int32 value);

  // required int32 room_owner_id = 2;
  inline bool has_room_owner_id() const;
  inline void clear_room_owner_id();
  static const int kRoomOwnerIdFieldNumber = 2;
  inline ::google::protobuf::int32 room_owner_id() const;
  inline void set_room_owner_id(::google::protobuf::int32 value);

  // required int32 players_num = 3;
  inline bool has_players_num() const;
  inline void clear_players_num();
  static const int kPlayersNumFieldNumber = 3;
  inline ::google::protobuf::int32 players_num() const;
  inline void set_players_num(::google::protobuf::int32 value);

  // required int32 cur_round = 4;
  inline bool has_cur_round() const;
  inline void clear_cur_round();
  static const int kCurRoundFieldNumber = 4;
  inline ::google::protobuf::int32 cur_round() const;
  inline void set_cur_round(::google::protobuf::int32 value);

  // required int32 total_round = 5;
  inline bool has_total_round() const;
  inline void clear_total_round();
  static const int kTotalRoundFieldNumber = 5;
  inline ::google::protobuf::int32 total_round() const;
  inline void set_total_round(::google::protobuf::int32 value);

  // required int32 banker_id = 6;
  inline bool has_banker_id() const;
  inline void clear_banker_id();
  static const int kBankerIdFieldNumber = 6;
  inline ::google::protobuf::int32 banker_id() const;
  inline void set_banker_id(::google::protobuf::int32 value);

  // repeated .gamer.protocol.GameEndDataMsgProtocol game_end_data = 7;
  inline int game_end_data_size() const;
  inline void clear_game_end_data();
  static const int kGameEndDataFieldNumber = 7;
  inline const ::gamer::protocol::GameEndDataMsgProtocol& game_end_data(int index) const;
  inline ::gamer::protocol::GameEndDataMsgProtocol* mutable_game_end_data(int index);
  inline ::gamer::protocol::GameEndDataMsgProtocol* add_game_end_data();
  inline const ::google::protobuf::RepeatedPtrField< ::gamer::protocol::GameEndDataMsgProtocol >&
      game_end_data() const;
  inline ::google::protobuf::RepeatedPtrField< ::gamer::protocol::GameEndDataMsgProtocol >*
      mutable_game_end_data();

  // @@protoc_insertion_point(class_scope:gamer.protocol.GameEndMsgProtocol)
 private:
  inline void set_has_room_id();
  inline void clear_has_room_id();
  inline void set_has_room_owner_id();
  inline void clear_has_room_owner_id();
  inline void set_has_players_num();
  inline void clear_has_players_num();
  inline void set_has_cur_round();
  inline void clear_has_cur_round();
  inline void set_has_total_round();
  inline void clear_has_total_round();
  inline void set_has_banker_id();
  inline void clear_has_banker_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::int32 room_id_;
  ::google::protobuf::int32 room_owner_id_;
  ::google::protobuf::int32 players_num_;
  ::google::protobuf::int32 cur_round_;
  ::google::protobuf::int32 total_round_;
  ::google::protobuf::int32 banker_id_;
  ::google::protobuf::RepeatedPtrField< ::gamer::protocol::GameEndDataMsgProtocol > game_end_data_;
  friend void  protobuf_AddDesc_game_5fend_5fmsg_5fprotocol_2eproto();
  friend void protobuf_AssignDesc_game_5fend_5fmsg_5fprotocol_2eproto();
  friend void protobuf_ShutdownFile_game_5fend_5fmsg_5fprotocol_2eproto();

  void InitAsDefaultInstance();
  static GameEndMsgProtocol* default_instance_;
};
// ===================================================================


// ===================================================================

// GameEndDataMsgProtocol

// required int32 player_id = 1;
inline bool GameEndDataMsgProtocol::has_player_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GameEndDataMsgProtocol::set_has_player_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GameEndDataMsgProtocol::clear_has_player_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GameEndDataMsgProtocol::clear_player_id() {
  player_id_ = 0;
  clear_has_player_id();
}
inline ::google::protobuf::int32 GameEndDataMsgProtocol::player_id() const {
  // @@protoc_insertion_point(field_get:gamer.protocol.GameEndDataMsgProtocol.player_id)
  return player_id_;
}
inline void GameEndDataMsgProtocol::set_player_id(::google::protobuf::int32 value) {
  set_has_player_id();
  player_id_ = value;
  // @@protoc_insertion_point(field_set:gamer.protocol.GameEndDataMsgProtocol.player_id)
}

// required string nick_name = 2;
inline bool GameEndDataMsgProtocol::has_nick_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void GameEndDataMsgProtocol::set_has_nick_name() {
  _has_bits_[0] |= 0x00000002u;
}
inline void GameEndDataMsgProtocol::clear_has_nick_name() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void GameEndDataMsgProtocol::clear_nick_name() {
  if (nick_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    nick_name_->clear();
  }
  clear_has_nick_name();
}
inline const ::std::string& GameEndDataMsgProtocol::nick_name() const {
  // @@protoc_insertion_point(field_get:gamer.protocol.GameEndDataMsgProtocol.nick_name)
  return *nick_name_;
}
inline void GameEndDataMsgProtocol::set_nick_name(const ::std::string& value) {
  set_has_nick_name();
  if (nick_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    nick_name_ = new ::std::string;
  }
  nick_name_->assign(value);
  // @@protoc_insertion_point(field_set:gamer.protocol.GameEndDataMsgProtocol.nick_name)
}
inline void GameEndDataMsgProtocol::set_nick_name(const char* value) {
  set_has_nick_name();
  if (nick_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    nick_name_ = new ::std::string;
  }
  nick_name_->assign(value);
  // @@protoc_insertion_point(field_set_char:gamer.protocol.GameEndDataMsgProtocol.nick_name)
}
inline void GameEndDataMsgProtocol::set_nick_name(const char* value, size_t size) {
  set_has_nick_name();
  if (nick_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    nick_name_ = new ::std::string;
  }
  nick_name_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:gamer.protocol.GameEndDataMsgProtocol.nick_name)
}
inline ::std::string* GameEndDataMsgProtocol::mutable_nick_name() {
  set_has_nick_name();
  if (nick_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    nick_name_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:gamer.protocol.GameEndDataMsgProtocol.nick_name)
  return nick_name_;
}
inline ::std::string* GameEndDataMsgProtocol::release_nick_name() {
  clear_has_nick_name();
  if (nick_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = nick_name_;
    nick_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void GameEndDataMsgProtocol::set_allocated_nick_name(::std::string* nick_name) {
  if (nick_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete nick_name_;
  }
  if (nick_name) {
    set_has_nick_name();
    nick_name_ = nick_name;
  } else {
    clear_has_nick_name();
    nick_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:gamer.protocol.GameEndDataMsgProtocol.nick_name)
}

// required int32 score = 3;
inline bool GameEndDataMsgProtocol::has_score() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void GameEndDataMsgProtocol::set_has_score() {
  _has_bits_[0] |= 0x00000004u;
}
inline void GameEndDataMsgProtocol::clear_has_score() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void GameEndDataMsgProtocol::clear_score() {
  score_ = 0;
  clear_has_score();
}
inline ::google::protobuf::int32 GameEndDataMsgProtocol::score() const {
  // @@protoc_insertion_point(field_get:gamer.protocol.GameEndDataMsgProtocol.score)
  return score_;
}
inline void GameEndDataMsgProtocol::set_score(::google::protobuf::int32 value) {
  set_has_score();
  score_ = value;
  // @@protoc_insertion_point(field_set:gamer.protocol.GameEndDataMsgProtocol.score)
}

// required int32 total_score = 4;
inline bool GameEndDataMsgProtocol::has_total_score() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void GameEndDataMsgProtocol::set_has_total_score() {
  _has_bits_[0] |= 0x00000008u;
}
inline void GameEndDataMsgProtocol::clear_has_total_score() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void GameEndDataMsgProtocol::clear_total_score() {
  total_score_ = 0;
  clear_has_total_score();
}
inline ::google::protobuf::int32 GameEndDataMsgProtocol::total_score() const {
  // @@protoc_insertion_point(field_get:gamer.protocol.GameEndDataMsgProtocol.total_score)
  return total_score_;
}
inline void GameEndDataMsgProtocol::set_total_score(::google::protobuf::int32 value) {
  set_has_total_score();
  total_score_ = value;
  // @@protoc_insertion_point(field_set:gamer.protocol.GameEndDataMsgProtocol.total_score)
}

// repeated .gamer.protocol.PlayerCardsMsgProtocol player_cards = 5;
inline int GameEndDataMsgProtocol::player_cards_size() const {
  return player_cards_.size();
}
inline void GameEndDataMsgProtocol::clear_player_cards() {
  player_cards_.Clear();
}
inline const ::gamer::protocol::PlayerCardsMsgProtocol& GameEndDataMsgProtocol::player_cards(int index) const {
  // @@protoc_insertion_point(field_get:gamer.protocol.GameEndDataMsgProtocol.player_cards)
  return player_cards_.Get(index);
}
inline ::gamer::protocol::PlayerCardsMsgProtocol* GameEndDataMsgProtocol::mutable_player_cards(int index) {
  // @@protoc_insertion_point(field_mutable:gamer.protocol.GameEndDataMsgProtocol.player_cards)
  return player_cards_.Mutable(index);
}
inline ::gamer::protocol::PlayerCardsMsgProtocol* GameEndDataMsgProtocol::add_player_cards() {
  // @@protoc_insertion_point(field_add:gamer.protocol.GameEndDataMsgProtocol.player_cards)
  return player_cards_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::gamer::protocol::PlayerCardsMsgProtocol >&
GameEndDataMsgProtocol::player_cards() const {
  // @@protoc_insertion_point(field_list:gamer.protocol.GameEndDataMsgProtocol.player_cards)
  return player_cards_;
}
inline ::google::protobuf::RepeatedPtrField< ::gamer::protocol::PlayerCardsMsgProtocol >*
GameEndDataMsgProtocol::mutable_player_cards() {
  // @@protoc_insertion_point(field_mutable_list:gamer.protocol.GameEndDataMsgProtocol.player_cards)
  return &player_cards_;
}

// -------------------------------------------------------------------

// GameEndMsgProtocol

// required int32 room_id = 1;
inline bool GameEndMsgProtocol::has_room_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GameEndMsgProtocol::set_has_room_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GameEndMsgProtocol::clear_has_room_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GameEndMsgProtocol::clear_room_id() {
  room_id_ = 0;
  clear_has_room_id();
}
inline ::google::protobuf::int32 GameEndMsgProtocol::room_id() const {
  // @@protoc_insertion_point(field_get:gamer.protocol.GameEndMsgProtocol.room_id)
  return room_id_;
}
inline void GameEndMsgProtocol::set_room_id(::google::protobuf::int32 value) {
  set_has_room_id();
  room_id_ = value;
  // @@protoc_insertion_point(field_set:gamer.protocol.GameEndMsgProtocol.room_id)
}

// required int32 room_owner_id = 2;
inline bool GameEndMsgProtocol::has_room_owner_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void GameEndMsgProtocol::set_has_room_owner_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void GameEndMsgProtocol::clear_has_room_owner_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void GameEndMsgProtocol::clear_room_owner_id() {
  room_owner_id_ = 0;
  clear_has_room_owner_id();
}
inline ::google::protobuf::int32 GameEndMsgProtocol::room_owner_id() const {
  // @@protoc_insertion_point(field_get:gamer.protocol.GameEndMsgProtocol.room_owner_id)
  return room_owner_id_;
}
inline void GameEndMsgProtocol::set_room_owner_id(::google::protobuf::int32 value) {
  set_has_room_owner_id();
  room_owner_id_ = value;
  // @@protoc_insertion_point(field_set:gamer.protocol.GameEndMsgProtocol.room_owner_id)
}

// required int32 players_num = 3;
inline bool GameEndMsgProtocol::has_players_num() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void GameEndMsgProtocol::set_has_players_num() {
  _has_bits_[0] |= 0x00000004u;
}
inline void GameEndMsgProtocol::clear_has_players_num() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void GameEndMsgProtocol::clear_players_num() {
  players_num_ = 0;
  clear_has_players_num();
}
inline ::google::protobuf::int32 GameEndMsgProtocol::players_num() const {
  // @@protoc_insertion_point(field_get:gamer.protocol.GameEndMsgProtocol.players_num)
  return players_num_;
}
inline void GameEndMsgProtocol::set_players_num(::google::protobuf::int32 value) {
  set_has_players_num();
  players_num_ = value;
  // @@protoc_insertion_point(field_set:gamer.protocol.GameEndMsgProtocol.players_num)
}

// required int32 cur_round = 4;
inline bool GameEndMsgProtocol::has_cur_round() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void GameEndMsgProtocol::set_has_cur_round() {
  _has_bits_[0] |= 0x00000008u;
}
inline void GameEndMsgProtocol::clear_has_cur_round() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void GameEndMsgProtocol::clear_cur_round() {
  cur_round_ = 0;
  clear_has_cur_round();
}
inline ::google::protobuf::int32 GameEndMsgProtocol::cur_round() const {
  // @@protoc_insertion_point(field_get:gamer.protocol.GameEndMsgProtocol.cur_round)
  return cur_round_;
}
inline void GameEndMsgProtocol::set_cur_round(::google::protobuf::int32 value) {
  set_has_cur_round();
  cur_round_ = value;
  // @@protoc_insertion_point(field_set:gamer.protocol.GameEndMsgProtocol.cur_round)
}

// required int32 total_round = 5;
inline bool GameEndMsgProtocol::has_total_round() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void GameEndMsgProtocol::set_has_total_round() {
  _has_bits_[0] |= 0x00000010u;
}
inline void GameEndMsgProtocol::clear_has_total_round() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void GameEndMsgProtocol::clear_total_round() {
  total_round_ = 0;
  clear_has_total_round();
}
inline ::google::protobuf::int32 GameEndMsgProtocol::total_round() const {
  // @@protoc_insertion_point(field_get:gamer.protocol.GameEndMsgProtocol.total_round)
  return total_round_;
}
inline void GameEndMsgProtocol::set_total_round(::google::protobuf::int32 value) {
  set_has_total_round();
  total_round_ = value;
  // @@protoc_insertion_point(field_set:gamer.protocol.GameEndMsgProtocol.total_round)
}

// required int32 banker_id = 6;
inline bool GameEndMsgProtocol::has_banker_id() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void GameEndMsgProtocol::set_has_banker_id() {
  _has_bits_[0] |= 0x00000020u;
}
inline void GameEndMsgProtocol::clear_has_banker_id() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void GameEndMsgProtocol::clear_banker_id() {
  banker_id_ = 0;
  clear_has_banker_id();
}
inline ::google::protobuf::int32 GameEndMsgProtocol::banker_id() const {
  // @@protoc_insertion_point(field_get:gamer.protocol.GameEndMsgProtocol.banker_id)
  return banker_id_;
}
inline void GameEndMsgProtocol::set_banker_id(::google::protobuf::int32 value) {
  set_has_banker_id();
  banker_id_ = value;
  // @@protoc_insertion_point(field_set:gamer.protocol.GameEndMsgProtocol.banker_id)
}

// repeated .gamer.protocol.GameEndDataMsgProtocol game_end_data = 7;
inline int GameEndMsgProtocol::game_end_data_size() const {
  return game_end_data_.size();
}
inline void GameEndMsgProtocol::clear_game_end_data() {
  game_end_data_.Clear();
}
inline const ::gamer::protocol::GameEndDataMsgProtocol& GameEndMsgProtocol::game_end_data(int index) const {
  // @@protoc_insertion_point(field_get:gamer.protocol.GameEndMsgProtocol.game_end_data)
  return game_end_data_.Get(index);
}
inline ::gamer::protocol::GameEndDataMsgProtocol* GameEndMsgProtocol::mutable_game_end_data(int index) {
  // @@protoc_insertion_point(field_mutable:gamer.protocol.GameEndMsgProtocol.game_end_data)
  return game_end_data_.Mutable(index);
}
inline ::gamer::protocol::GameEndDataMsgProtocol* GameEndMsgProtocol::add_game_end_data() {
  // @@protoc_insertion_point(field_add:gamer.protocol.GameEndMsgProtocol.game_end_data)
  return game_end_data_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::gamer::protocol::GameEndDataMsgProtocol >&
GameEndMsgProtocol::game_end_data() const {
  // @@protoc_insertion_point(field_list:gamer.protocol.GameEndMsgProtocol.game_end_data)
  return game_end_data_;
}
inline ::google::protobuf::RepeatedPtrField< ::gamer::protocol::GameEndDataMsgProtocol >*
GameEndMsgProtocol::mutable_game_end_data() {
  // @@protoc_insertion_point(field_mutable_list:gamer.protocol.GameEndMsgProtocol.game_end_data)
  return &game_end_data_;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace protocol
}  // namespace gamer

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_game_5fend_5fmsg_5fprotocol_2eproto__INCLUDED
