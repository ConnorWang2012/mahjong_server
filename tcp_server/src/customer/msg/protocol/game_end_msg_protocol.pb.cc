// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: game_end_msg_protocol.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "game_end_msg_protocol.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace gamer {
namespace protocol {

namespace {

const ::google::protobuf::Descriptor* GameEndDataMsgProtocol_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GameEndDataMsgProtocol_reflection_ = NULL;
const ::google::protobuf::Descriptor* GameEndMsgProtocol_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GameEndMsgProtocol_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_game_5fend_5fmsg_5fprotocol_2eproto() {
  protobuf_AddDesc_game_5fend_5fmsg_5fprotocol_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "game_end_msg_protocol.proto");
  GOOGLE_CHECK(file != NULL);
  GameEndDataMsgProtocol_descriptor_ = file->message_type(0);
  static const int GameEndDataMsgProtocol_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameEndDataMsgProtocol, player_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameEndDataMsgProtocol, nick_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameEndDataMsgProtocol, score_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameEndDataMsgProtocol, total_score_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameEndDataMsgProtocol, player_cards_),
  };
  GameEndDataMsgProtocol_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GameEndDataMsgProtocol_descriptor_,
      GameEndDataMsgProtocol::default_instance_,
      GameEndDataMsgProtocol_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameEndDataMsgProtocol, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameEndDataMsgProtocol, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GameEndDataMsgProtocol));
  GameEndMsgProtocol_descriptor_ = file->message_type(1);
  static const int GameEndMsgProtocol_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameEndMsgProtocol, room_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameEndMsgProtocol, room_owner_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameEndMsgProtocol, players_num_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameEndMsgProtocol, cur_round_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameEndMsgProtocol, total_round_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameEndMsgProtocol, banker_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameEndMsgProtocol, game_end_data_),
  };
  GameEndMsgProtocol_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GameEndMsgProtocol_descriptor_,
      GameEndMsgProtocol::default_instance_,
      GameEndMsgProtocol_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameEndMsgProtocol, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameEndMsgProtocol, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GameEndMsgProtocol));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_game_5fend_5fmsg_5fprotocol_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GameEndDataMsgProtocol_descriptor_, &GameEndDataMsgProtocol::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GameEndMsgProtocol_descriptor_, &GameEndMsgProtocol::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_game_5fend_5fmsg_5fprotocol_2eproto() {
  delete GameEndDataMsgProtocol::default_instance_;
  delete GameEndDataMsgProtocol_reflection_;
  delete GameEndMsgProtocol::default_instance_;
  delete GameEndMsgProtocol_reflection_;
}

void protobuf_AddDesc_game_5fend_5fmsg_5fprotocol_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::gamer::protocol::protobuf_AddDesc_player_5fcards_5fmsg_5fprotocol_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\033game_end_msg_protocol.proto\022\016gamer.pro"
    "tocol\032\037player_cards_msg_protocol.proto\"\240"
    "\001\n\026GameEndDataMsgProtocol\022\021\n\tplayer_id\030\001"
    " \002(\005\022\021\n\tnick_name\030\002 \002(\t\022\r\n\005score\030\003 \002(\005\022\023"
    "\n\013total_score\030\004 \002(\005\022<\n\014player_cards\030\005 \003("
    "\0132&.gamer.protocol.PlayerCardsMsgProtoco"
    "l\"\313\001\n\022GameEndMsgProtocol\022\017\n\007room_id\030\001 \002("
    "\005\022\025\n\rroom_owner_id\030\002 \002(\005\022\023\n\013players_num\030"
    "\003 \002(\005\022\021\n\tcur_round\030\004 \002(\005\022\023\n\013total_round\030"
    "\005 \002(\005\022\021\n\tbanker_id\030\006 \002(\005\022=\n\rgame_end_dat"
    "a\030\007 \003(\0132&.gamer.protocol.GameEndDataMsgP"
    "rotocol", 447);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "game_end_msg_protocol.proto", &protobuf_RegisterTypes);
  GameEndDataMsgProtocol::default_instance_ = new GameEndDataMsgProtocol();
  GameEndMsgProtocol::default_instance_ = new GameEndMsgProtocol();
  GameEndDataMsgProtocol::default_instance_->InitAsDefaultInstance();
  GameEndMsgProtocol::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_game_5fend_5fmsg_5fprotocol_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_game_5fend_5fmsg_5fprotocol_2eproto {
  StaticDescriptorInitializer_game_5fend_5fmsg_5fprotocol_2eproto() {
    protobuf_AddDesc_game_5fend_5fmsg_5fprotocol_2eproto();
  }
} static_descriptor_initializer_game_5fend_5fmsg_5fprotocol_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int GameEndDataMsgProtocol::kPlayerIdFieldNumber;
const int GameEndDataMsgProtocol::kNickNameFieldNumber;
const int GameEndDataMsgProtocol::kScoreFieldNumber;
const int GameEndDataMsgProtocol::kTotalScoreFieldNumber;
const int GameEndDataMsgProtocol::kPlayerCardsFieldNumber;
#endif  // !_MSC_VER

GameEndDataMsgProtocol::GameEndDataMsgProtocol()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:gamer.protocol.GameEndDataMsgProtocol)
}

void GameEndDataMsgProtocol::InitAsDefaultInstance() {
}

GameEndDataMsgProtocol::GameEndDataMsgProtocol(const GameEndDataMsgProtocol& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:gamer.protocol.GameEndDataMsgProtocol)
}

void GameEndDataMsgProtocol::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  player_id_ = 0;
  nick_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  score_ = 0;
  total_score_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GameEndDataMsgProtocol::~GameEndDataMsgProtocol() {
  // @@protoc_insertion_point(destructor:gamer.protocol.GameEndDataMsgProtocol)
  SharedDtor();
}

void GameEndDataMsgProtocol::SharedDtor() {
  if (nick_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete nick_name_;
  }
  if (this != default_instance_) {
  }
}

void GameEndDataMsgProtocol::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GameEndDataMsgProtocol::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GameEndDataMsgProtocol_descriptor_;
}

const GameEndDataMsgProtocol& GameEndDataMsgProtocol::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_game_5fend_5fmsg_5fprotocol_2eproto();
  return *default_instance_;
}

GameEndDataMsgProtocol* GameEndDataMsgProtocol::default_instance_ = NULL;

GameEndDataMsgProtocol* GameEndDataMsgProtocol::New() const {
  return new GameEndDataMsgProtocol;
}

void GameEndDataMsgProtocol::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<GameEndDataMsgProtocol*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 15) {
    ZR_(player_id_, score_);
    if (has_nick_name()) {
      if (nick_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        nick_name_->clear();
      }
    }
    total_score_ = 0;
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  player_cards_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GameEndDataMsgProtocol::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:gamer.protocol.GameEndDataMsgProtocol)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 player_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &player_id_)));
          set_has_player_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_nick_name;
        break;
      }

      // required string nick_name = 2;
      case 2: {
        if (tag == 18) {
         parse_nick_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_nick_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->nick_name().data(), this->nick_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "nick_name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_score;
        break;
      }

      // required int32 score = 3;
      case 3: {
        if (tag == 24) {
         parse_score:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &score_)));
          set_has_score();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_total_score;
        break;
      }

      // required int32 total_score = 4;
      case 4: {
        if (tag == 32) {
         parse_total_score:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &total_score_)));
          set_has_total_score();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_player_cards;
        break;
      }

      // repeated .gamer.protocol.PlayerCardsMsgProtocol player_cards = 5;
      case 5: {
        if (tag == 42) {
         parse_player_cards:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_player_cards()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_player_cards;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:gamer.protocol.GameEndDataMsgProtocol)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:gamer.protocol.GameEndDataMsgProtocol)
  return false;
#undef DO_
}

void GameEndDataMsgProtocol::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:gamer.protocol.GameEndDataMsgProtocol)
  // required int32 player_id = 1;
  if (has_player_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->player_id(), output);
  }

  // required string nick_name = 2;
  if (has_nick_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->nick_name().data(), this->nick_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "nick_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->nick_name(), output);
  }

  // required int32 score = 3;
  if (has_score()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->score(), output);
  }

  // required int32 total_score = 4;
  if (has_total_score()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->total_score(), output);
  }

  // repeated .gamer.protocol.PlayerCardsMsgProtocol player_cards = 5;
  for (int i = 0; i < this->player_cards_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->player_cards(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:gamer.protocol.GameEndDataMsgProtocol)
}

::google::protobuf::uint8* GameEndDataMsgProtocol::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:gamer.protocol.GameEndDataMsgProtocol)
  // required int32 player_id = 1;
  if (has_player_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->player_id(), target);
  }

  // required string nick_name = 2;
  if (has_nick_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->nick_name().data(), this->nick_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "nick_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->nick_name(), target);
  }

  // required int32 score = 3;
  if (has_score()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->score(), target);
  }

  // required int32 total_score = 4;
  if (has_total_score()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->total_score(), target);
  }

  // repeated .gamer.protocol.PlayerCardsMsgProtocol player_cards = 5;
  for (int i = 0; i < this->player_cards_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->player_cards(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:gamer.protocol.GameEndDataMsgProtocol)
  return target;
}

int GameEndDataMsgProtocol::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 player_id = 1;
    if (has_player_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->player_id());
    }

    // required string nick_name = 2;
    if (has_nick_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->nick_name());
    }

    // required int32 score = 3;
    if (has_score()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->score());
    }

    // required int32 total_score = 4;
    if (has_total_score()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->total_score());
    }

  }
  // repeated .gamer.protocol.PlayerCardsMsgProtocol player_cards = 5;
  total_size += 1 * this->player_cards_size();
  for (int i = 0; i < this->player_cards_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->player_cards(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GameEndDataMsgProtocol::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GameEndDataMsgProtocol* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GameEndDataMsgProtocol*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GameEndDataMsgProtocol::MergeFrom(const GameEndDataMsgProtocol& from) {
  GOOGLE_CHECK_NE(&from, this);
  player_cards_.MergeFrom(from.player_cards_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_player_id()) {
      set_player_id(from.player_id());
    }
    if (from.has_nick_name()) {
      set_nick_name(from.nick_name());
    }
    if (from.has_score()) {
      set_score(from.score());
    }
    if (from.has_total_score()) {
      set_total_score(from.total_score());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GameEndDataMsgProtocol::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GameEndDataMsgProtocol::CopyFrom(const GameEndDataMsgProtocol& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GameEndDataMsgProtocol::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;

  if (!::google::protobuf::internal::AllAreInitialized(this->player_cards())) return false;
  return true;
}

void GameEndDataMsgProtocol::Swap(GameEndDataMsgProtocol* other) {
  if (other != this) {
    std::swap(player_id_, other->player_id_);
    std::swap(nick_name_, other->nick_name_);
    std::swap(score_, other->score_);
    std::swap(total_score_, other->total_score_);
    player_cards_.Swap(&other->player_cards_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GameEndDataMsgProtocol::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GameEndDataMsgProtocol_descriptor_;
  metadata.reflection = GameEndDataMsgProtocol_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GameEndMsgProtocol::kRoomIdFieldNumber;
const int GameEndMsgProtocol::kRoomOwnerIdFieldNumber;
const int GameEndMsgProtocol::kPlayersNumFieldNumber;
const int GameEndMsgProtocol::kCurRoundFieldNumber;
const int GameEndMsgProtocol::kTotalRoundFieldNumber;
const int GameEndMsgProtocol::kBankerIdFieldNumber;
const int GameEndMsgProtocol::kGameEndDataFieldNumber;
#endif  // !_MSC_VER

GameEndMsgProtocol::GameEndMsgProtocol()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:gamer.protocol.GameEndMsgProtocol)
}

void GameEndMsgProtocol::InitAsDefaultInstance() {
}

GameEndMsgProtocol::GameEndMsgProtocol(const GameEndMsgProtocol& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:gamer.protocol.GameEndMsgProtocol)
}

void GameEndMsgProtocol::SharedCtor() {
  _cached_size_ = 0;
  room_id_ = 0;
  room_owner_id_ = 0;
  players_num_ = 0;
  cur_round_ = 0;
  total_round_ = 0;
  banker_id_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GameEndMsgProtocol::~GameEndMsgProtocol() {
  // @@protoc_insertion_point(destructor:gamer.protocol.GameEndMsgProtocol)
  SharedDtor();
}

void GameEndMsgProtocol::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GameEndMsgProtocol::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GameEndMsgProtocol::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GameEndMsgProtocol_descriptor_;
}

const GameEndMsgProtocol& GameEndMsgProtocol::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_game_5fend_5fmsg_5fprotocol_2eproto();
  return *default_instance_;
}

GameEndMsgProtocol* GameEndMsgProtocol::default_instance_ = NULL;

GameEndMsgProtocol* GameEndMsgProtocol::New() const {
  return new GameEndMsgProtocol;
}

void GameEndMsgProtocol::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<GameEndMsgProtocol*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 63) {
    ZR_(room_id_, banker_id_);
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  game_end_data_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GameEndMsgProtocol::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:gamer.protocol.GameEndMsgProtocol)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 room_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &room_id_)));
          set_has_room_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_room_owner_id;
        break;
      }

      // required int32 room_owner_id = 2;
      case 2: {
        if (tag == 16) {
         parse_room_owner_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &room_owner_id_)));
          set_has_room_owner_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_players_num;
        break;
      }

      // required int32 players_num = 3;
      case 3: {
        if (tag == 24) {
         parse_players_num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &players_num_)));
          set_has_players_num();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_cur_round;
        break;
      }

      // required int32 cur_round = 4;
      case 4: {
        if (tag == 32) {
         parse_cur_round:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &cur_round_)));
          set_has_cur_round();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_total_round;
        break;
      }

      // required int32 total_round = 5;
      case 5: {
        if (tag == 40) {
         parse_total_round:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &total_round_)));
          set_has_total_round();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_banker_id;
        break;
      }

      // required int32 banker_id = 6;
      case 6: {
        if (tag == 48) {
         parse_banker_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &banker_id_)));
          set_has_banker_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_game_end_data;
        break;
      }

      // repeated .gamer.protocol.GameEndDataMsgProtocol game_end_data = 7;
      case 7: {
        if (tag == 58) {
         parse_game_end_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_game_end_data()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_game_end_data;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:gamer.protocol.GameEndMsgProtocol)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:gamer.protocol.GameEndMsgProtocol)
  return false;
#undef DO_
}

void GameEndMsgProtocol::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:gamer.protocol.GameEndMsgProtocol)
  // required int32 room_id = 1;
  if (has_room_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->room_id(), output);
  }

  // required int32 room_owner_id = 2;
  if (has_room_owner_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->room_owner_id(), output);
  }

  // required int32 players_num = 3;
  if (has_players_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->players_num(), output);
  }

  // required int32 cur_round = 4;
  if (has_cur_round()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->cur_round(), output);
  }

  // required int32 total_round = 5;
  if (has_total_round()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->total_round(), output);
  }

  // required int32 banker_id = 6;
  if (has_banker_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->banker_id(), output);
  }

  // repeated .gamer.protocol.GameEndDataMsgProtocol game_end_data = 7;
  for (int i = 0; i < this->game_end_data_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->game_end_data(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:gamer.protocol.GameEndMsgProtocol)
}

::google::protobuf::uint8* GameEndMsgProtocol::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:gamer.protocol.GameEndMsgProtocol)
  // required int32 room_id = 1;
  if (has_room_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->room_id(), target);
  }

  // required int32 room_owner_id = 2;
  if (has_room_owner_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->room_owner_id(), target);
  }

  // required int32 players_num = 3;
  if (has_players_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->players_num(), target);
  }

  // required int32 cur_round = 4;
  if (has_cur_round()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->cur_round(), target);
  }

  // required int32 total_round = 5;
  if (has_total_round()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->total_round(), target);
  }

  // required int32 banker_id = 6;
  if (has_banker_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->banker_id(), target);
  }

  // repeated .gamer.protocol.GameEndDataMsgProtocol game_end_data = 7;
  for (int i = 0; i < this->game_end_data_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        7, this->game_end_data(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:gamer.protocol.GameEndMsgProtocol)
  return target;
}

int GameEndMsgProtocol::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 room_id = 1;
    if (has_room_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->room_id());
    }

    // required int32 room_owner_id = 2;
    if (has_room_owner_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->room_owner_id());
    }

    // required int32 players_num = 3;
    if (has_players_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->players_num());
    }

    // required int32 cur_round = 4;
    if (has_cur_round()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->cur_round());
    }

    // required int32 total_round = 5;
    if (has_total_round()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->total_round());
    }

    // required int32 banker_id = 6;
    if (has_banker_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->banker_id());
    }

  }
  // repeated .gamer.protocol.GameEndDataMsgProtocol game_end_data = 7;
  total_size += 1 * this->game_end_data_size();
  for (int i = 0; i < this->game_end_data_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->game_end_data(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GameEndMsgProtocol::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GameEndMsgProtocol* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GameEndMsgProtocol*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GameEndMsgProtocol::MergeFrom(const GameEndMsgProtocol& from) {
  GOOGLE_CHECK_NE(&from, this);
  game_end_data_.MergeFrom(from.game_end_data_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_room_id()) {
      set_room_id(from.room_id());
    }
    if (from.has_room_owner_id()) {
      set_room_owner_id(from.room_owner_id());
    }
    if (from.has_players_num()) {
      set_players_num(from.players_num());
    }
    if (from.has_cur_round()) {
      set_cur_round(from.cur_round());
    }
    if (from.has_total_round()) {
      set_total_round(from.total_round());
    }
    if (from.has_banker_id()) {
      set_banker_id(from.banker_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GameEndMsgProtocol::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GameEndMsgProtocol::CopyFrom(const GameEndMsgProtocol& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GameEndMsgProtocol::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000003f) != 0x0000003f) return false;

  if (!::google::protobuf::internal::AllAreInitialized(this->game_end_data())) return false;
  return true;
}

void GameEndMsgProtocol::Swap(GameEndMsgProtocol* other) {
  if (other != this) {
    std::swap(room_id_, other->room_id_);
    std::swap(room_owner_id_, other->room_owner_id_);
    std::swap(players_num_, other->players_num_);
    std::swap(cur_round_, other->cur_round_);
    std::swap(total_round_, other->total_round_);
    std::swap(banker_id_, other->banker_id_);
    game_end_data_.Swap(&other->game_end_data_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GameEndMsgProtocol::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GameEndMsgProtocol_descriptor_;
  metadata.reflection = GameEndMsgProtocol_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace protocol
}  // namespace gamer

// @@protoc_insertion_point(global_scope)
