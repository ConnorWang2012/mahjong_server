// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: player_msg_protocol.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "player_msg_protocol.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace gamer {
namespace protocol {

namespace {

const ::google::protobuf::Descriptor* PlayerMsgProtocol_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PlayerMsgProtocol_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_player_5fmsg_5fprotocol_2eproto() {
  protobuf_AddDesc_player_5fmsg_5fprotocol_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "player_msg_protocol.proto");
  GOOGLE_CHECK(file != NULL);
  PlayerMsgProtocol_descriptor_ = file->message_type(0);
  static const int PlayerMsgProtocol_offsets_[13] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerMsgProtocol, player_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerMsgProtocol, sex_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerMsgProtocol, level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerMsgProtocol, score_gold_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerMsgProtocol, score_diamond_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerMsgProtocol, num_room_cards_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerMsgProtocol, num_played_games_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerMsgProtocol, num_win_games_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerMsgProtocol, num_loss_games_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerMsgProtocol, vip_level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerMsgProtocol, level_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerMsgProtocol, nick_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerMsgProtocol, head_portrait_),
  };
  PlayerMsgProtocol_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PlayerMsgProtocol_descriptor_,
      PlayerMsgProtocol::default_instance_,
      PlayerMsgProtocol_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerMsgProtocol, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerMsgProtocol, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PlayerMsgProtocol));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_player_5fmsg_5fprotocol_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PlayerMsgProtocol_descriptor_, &PlayerMsgProtocol::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_player_5fmsg_5fprotocol_2eproto() {
  delete PlayerMsgProtocol::default_instance_;
  delete PlayerMsgProtocol_reflection_;
  delete PlayerMsgProtocol::_default_nick_name_;
}

void protobuf_AddDesc_player_5fmsg_5fprotocol_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\031player_msg_protocol.proto\022\016gamer.proto"
    "col\"\270\002\n\021PlayerMsgProtocol\022\021\n\tplayer_id\030\001"
    " \002(\r\022\016\n\003sex\030\002 \001(\r:\0011\022\020\n\005level\030\003 \001(\r:\0011\022\022"
    "\n\nscore_gold\030\004 \001(\r\022\025\n\rscore_diamond\030\005 \001("
    "\r\022\026\n\016num_room_cards\030\006 \001(\r\022\033\n\020num_played_"
    "games\030\007 \001(\r:\0010\022\030\n\rnum_win_games\030\010 \001(\r:\0010"
    "\022\031\n\016num_loss_games\030\t \001(\r:\0010\022\024\n\tvip_level"
    "\030\n \001(\r:\0010\022\022\n\nlevel_name\030\013 \001(\014\022\030\n\tnick_na"
    "me\030\014 \001(\014:\005Young\022\025\n\rhead_portrait\030\r \001(\014", 358);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "player_msg_protocol.proto", &protobuf_RegisterTypes);
  PlayerMsgProtocol::_default_nick_name_ =
      new ::std::string("Young", 5);
  PlayerMsgProtocol::default_instance_ = new PlayerMsgProtocol();
  PlayerMsgProtocol::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_player_5fmsg_5fprotocol_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_player_5fmsg_5fprotocol_2eproto {
  StaticDescriptorInitializer_player_5fmsg_5fprotocol_2eproto() {
    protobuf_AddDesc_player_5fmsg_5fprotocol_2eproto();
  }
} static_descriptor_initializer_player_5fmsg_5fprotocol_2eproto_;

// ===================================================================

::std::string* PlayerMsgProtocol::_default_nick_name_ = NULL;
#ifndef _MSC_VER
const int PlayerMsgProtocol::kPlayerIdFieldNumber;
const int PlayerMsgProtocol::kSexFieldNumber;
const int PlayerMsgProtocol::kLevelFieldNumber;
const int PlayerMsgProtocol::kScoreGoldFieldNumber;
const int PlayerMsgProtocol::kScoreDiamondFieldNumber;
const int PlayerMsgProtocol::kNumRoomCardsFieldNumber;
const int PlayerMsgProtocol::kNumPlayedGamesFieldNumber;
const int PlayerMsgProtocol::kNumWinGamesFieldNumber;
const int PlayerMsgProtocol::kNumLossGamesFieldNumber;
const int PlayerMsgProtocol::kVipLevelFieldNumber;
const int PlayerMsgProtocol::kLevelNameFieldNumber;
const int PlayerMsgProtocol::kNickNameFieldNumber;
const int PlayerMsgProtocol::kHeadPortraitFieldNumber;
#endif  // !_MSC_VER

PlayerMsgProtocol::PlayerMsgProtocol()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:gamer.protocol.PlayerMsgProtocol)
}

void PlayerMsgProtocol::InitAsDefaultInstance() {
}

PlayerMsgProtocol::PlayerMsgProtocol(const PlayerMsgProtocol& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:gamer.protocol.PlayerMsgProtocol)
}

void PlayerMsgProtocol::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  player_id_ = 0u;
  sex_ = 1u;
  level_ = 1u;
  score_gold_ = 0u;
  score_diamond_ = 0u;
  num_room_cards_ = 0u;
  num_played_games_ = 0u;
  num_win_games_ = 0u;
  num_loss_games_ = 0u;
  vip_level_ = 0u;
  level_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  nick_name_ = const_cast< ::std::string*>(_default_nick_name_);
  head_portrait_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PlayerMsgProtocol::~PlayerMsgProtocol() {
  // @@protoc_insertion_point(destructor:gamer.protocol.PlayerMsgProtocol)
  SharedDtor();
}

void PlayerMsgProtocol::SharedDtor() {
  if (level_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete level_name_;
  }
  if (nick_name_ != _default_nick_name_) {
    delete nick_name_;
  }
  if (head_portrait_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete head_portrait_;
  }
  if (this != default_instance_) {
  }
}

void PlayerMsgProtocol::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PlayerMsgProtocol::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PlayerMsgProtocol_descriptor_;
}

const PlayerMsgProtocol& PlayerMsgProtocol::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_player_5fmsg_5fprotocol_2eproto();
  return *default_instance_;
}

PlayerMsgProtocol* PlayerMsgProtocol::default_instance_ = NULL;

PlayerMsgProtocol* PlayerMsgProtocol::New() const {
  return new PlayerMsgProtocol;
}

void PlayerMsgProtocol::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<PlayerMsgProtocol*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 255) {
    ZR_(score_gold_, num_win_games_);
    player_id_ = 0u;
    sex_ = 1u;
    level_ = 1u;
  }
  if (_has_bits_[8 / 32] & 7936) {
    ZR_(num_loss_games_, vip_level_);
    if (has_level_name()) {
      if (level_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        level_name_->clear();
      }
    }
    if (has_nick_name()) {
      if (nick_name_ != _default_nick_name_) {
        nick_name_->assign(*_default_nick_name_);
      }
    }
    if (has_head_portrait()) {
      if (head_portrait_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        head_portrait_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PlayerMsgProtocol::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:gamer.protocol.PlayerMsgProtocol)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 player_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &player_id_)));
          set_has_player_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_sex;
        break;
      }

      // optional uint32 sex = 2 [default = 1];
      case 2: {
        if (tag == 16) {
         parse_sex:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &sex_)));
          set_has_sex();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_level;
        break;
      }

      // optional uint32 level = 3 [default = 1];
      case 3: {
        if (tag == 24) {
         parse_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &level_)));
          set_has_level();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_score_gold;
        break;
      }

      // optional uint32 score_gold = 4;
      case 4: {
        if (tag == 32) {
         parse_score_gold:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &score_gold_)));
          set_has_score_gold();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_score_diamond;
        break;
      }

      // optional uint32 score_diamond = 5;
      case 5: {
        if (tag == 40) {
         parse_score_diamond:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &score_diamond_)));
          set_has_score_diamond();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_num_room_cards;
        break;
      }

      // optional uint32 num_room_cards = 6;
      case 6: {
        if (tag == 48) {
         parse_num_room_cards:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &num_room_cards_)));
          set_has_num_room_cards();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_num_played_games;
        break;
      }

      // optional uint32 num_played_games = 7 [default = 0];
      case 7: {
        if (tag == 56) {
         parse_num_played_games:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &num_played_games_)));
          set_has_num_played_games();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_num_win_games;
        break;
      }

      // optional uint32 num_win_games = 8 [default = 0];
      case 8: {
        if (tag == 64) {
         parse_num_win_games:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &num_win_games_)));
          set_has_num_win_games();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(72)) goto parse_num_loss_games;
        break;
      }

      // optional uint32 num_loss_games = 9 [default = 0];
      case 9: {
        if (tag == 72) {
         parse_num_loss_games:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &num_loss_games_)));
          set_has_num_loss_games();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(80)) goto parse_vip_level;
        break;
      }

      // optional uint32 vip_level = 10 [default = 0];
      case 10: {
        if (tag == 80) {
         parse_vip_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &vip_level_)));
          set_has_vip_level();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(90)) goto parse_level_name;
        break;
      }

      // optional bytes level_name = 11;
      case 11: {
        if (tag == 90) {
         parse_level_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_level_name()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(98)) goto parse_nick_name;
        break;
      }

      // optional bytes nick_name = 12 [default = "Young"];
      case 12: {
        if (tag == 98) {
         parse_nick_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_nick_name()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(106)) goto parse_head_portrait;
        break;
      }

      // optional bytes head_portrait = 13;
      case 13: {
        if (tag == 106) {
         parse_head_portrait:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_head_portrait()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:gamer.protocol.PlayerMsgProtocol)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:gamer.protocol.PlayerMsgProtocol)
  return false;
#undef DO_
}

void PlayerMsgProtocol::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:gamer.protocol.PlayerMsgProtocol)
  // required uint32 player_id = 1;
  if (has_player_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->player_id(), output);
  }

  // optional uint32 sex = 2 [default = 1];
  if (has_sex()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->sex(), output);
  }

  // optional uint32 level = 3 [default = 1];
  if (has_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->level(), output);
  }

  // optional uint32 score_gold = 4;
  if (has_score_gold()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->score_gold(), output);
  }

  // optional uint32 score_diamond = 5;
  if (has_score_diamond()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->score_diamond(), output);
  }

  // optional uint32 num_room_cards = 6;
  if (has_num_room_cards()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->num_room_cards(), output);
  }

  // optional uint32 num_played_games = 7 [default = 0];
  if (has_num_played_games()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->num_played_games(), output);
  }

  // optional uint32 num_win_games = 8 [default = 0];
  if (has_num_win_games()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->num_win_games(), output);
  }

  // optional uint32 num_loss_games = 9 [default = 0];
  if (has_num_loss_games()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->num_loss_games(), output);
  }

  // optional uint32 vip_level = 10 [default = 0];
  if (has_vip_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(10, this->vip_level(), output);
  }

  // optional bytes level_name = 11;
  if (has_level_name()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      11, this->level_name(), output);
  }

  // optional bytes nick_name = 12 [default = "Young"];
  if (has_nick_name()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      12, this->nick_name(), output);
  }

  // optional bytes head_portrait = 13;
  if (has_head_portrait()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      13, this->head_portrait(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:gamer.protocol.PlayerMsgProtocol)
}

::google::protobuf::uint8* PlayerMsgProtocol::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:gamer.protocol.PlayerMsgProtocol)
  // required uint32 player_id = 1;
  if (has_player_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->player_id(), target);
  }

  // optional uint32 sex = 2 [default = 1];
  if (has_sex()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->sex(), target);
  }

  // optional uint32 level = 3 [default = 1];
  if (has_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->level(), target);
  }

  // optional uint32 score_gold = 4;
  if (has_score_gold()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->score_gold(), target);
  }

  // optional uint32 score_diamond = 5;
  if (has_score_diamond()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->score_diamond(), target);
  }

  // optional uint32 num_room_cards = 6;
  if (has_num_room_cards()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->num_room_cards(), target);
  }

  // optional uint32 num_played_games = 7 [default = 0];
  if (has_num_played_games()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->num_played_games(), target);
  }

  // optional uint32 num_win_games = 8 [default = 0];
  if (has_num_win_games()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->num_win_games(), target);
  }

  // optional uint32 num_loss_games = 9 [default = 0];
  if (has_num_loss_games()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(9, this->num_loss_games(), target);
  }

  // optional uint32 vip_level = 10 [default = 0];
  if (has_vip_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(10, this->vip_level(), target);
  }

  // optional bytes level_name = 11;
  if (has_level_name()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        11, this->level_name(), target);
  }

  // optional bytes nick_name = 12 [default = "Young"];
  if (has_nick_name()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        12, this->nick_name(), target);
  }

  // optional bytes head_portrait = 13;
  if (has_head_portrait()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        13, this->head_portrait(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:gamer.protocol.PlayerMsgProtocol)
  return target;
}

int PlayerMsgProtocol::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 player_id = 1;
    if (has_player_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->player_id());
    }

    // optional uint32 sex = 2 [default = 1];
    if (has_sex()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->sex());
    }

    // optional uint32 level = 3 [default = 1];
    if (has_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->level());
    }

    // optional uint32 score_gold = 4;
    if (has_score_gold()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->score_gold());
    }

    // optional uint32 score_diamond = 5;
    if (has_score_diamond()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->score_diamond());
    }

    // optional uint32 num_room_cards = 6;
    if (has_num_room_cards()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->num_room_cards());
    }

    // optional uint32 num_played_games = 7 [default = 0];
    if (has_num_played_games()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->num_played_games());
    }

    // optional uint32 num_win_games = 8 [default = 0];
    if (has_num_win_games()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->num_win_games());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional uint32 num_loss_games = 9 [default = 0];
    if (has_num_loss_games()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->num_loss_games());
    }

    // optional uint32 vip_level = 10 [default = 0];
    if (has_vip_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->vip_level());
    }

    // optional bytes level_name = 11;
    if (has_level_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->level_name());
    }

    // optional bytes nick_name = 12 [default = "Young"];
    if (has_nick_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->nick_name());
    }

    // optional bytes head_portrait = 13;
    if (has_head_portrait()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->head_portrait());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PlayerMsgProtocol::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PlayerMsgProtocol* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PlayerMsgProtocol*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PlayerMsgProtocol::MergeFrom(const PlayerMsgProtocol& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_player_id()) {
      set_player_id(from.player_id());
    }
    if (from.has_sex()) {
      set_sex(from.sex());
    }
    if (from.has_level()) {
      set_level(from.level());
    }
    if (from.has_score_gold()) {
      set_score_gold(from.score_gold());
    }
    if (from.has_score_diamond()) {
      set_score_diamond(from.score_diamond());
    }
    if (from.has_num_room_cards()) {
      set_num_room_cards(from.num_room_cards());
    }
    if (from.has_num_played_games()) {
      set_num_played_games(from.num_played_games());
    }
    if (from.has_num_win_games()) {
      set_num_win_games(from.num_win_games());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_num_loss_games()) {
      set_num_loss_games(from.num_loss_games());
    }
    if (from.has_vip_level()) {
      set_vip_level(from.vip_level());
    }
    if (from.has_level_name()) {
      set_level_name(from.level_name());
    }
    if (from.has_nick_name()) {
      set_nick_name(from.nick_name());
    }
    if (from.has_head_portrait()) {
      set_head_portrait(from.head_portrait());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PlayerMsgProtocol::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PlayerMsgProtocol::CopyFrom(const PlayerMsgProtocol& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PlayerMsgProtocol::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void PlayerMsgProtocol::Swap(PlayerMsgProtocol* other) {
  if (other != this) {
    std::swap(player_id_, other->player_id_);
    std::swap(sex_, other->sex_);
    std::swap(level_, other->level_);
    std::swap(score_gold_, other->score_gold_);
    std::swap(score_diamond_, other->score_diamond_);
    std::swap(num_room_cards_, other->num_room_cards_);
    std::swap(num_played_games_, other->num_played_games_);
    std::swap(num_win_games_, other->num_win_games_);
    std::swap(num_loss_games_, other->num_loss_games_);
    std::swap(vip_level_, other->vip_level_);
    std::swap(level_name_, other->level_name_);
    std::swap(nick_name_, other->nick_name_);
    std::swap(head_portrait_, other->head_portrait_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PlayerMsgProtocol::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PlayerMsgProtocol_descriptor_;
  metadata.reflection = PlayerMsgProtocol_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace protocol
}  // namespace gamer

// @@protoc_insertion_point(global_scope)
