// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: property_changed_msg_protocol.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "property_changed_msg_protocol.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace gamer {
namespace protocol {

namespace {

const ::google::protobuf::Descriptor* PropertyChangedMsgProtocol_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PropertyChangedMsgProtocol_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_property_5fchanged_5fmsg_5fprotocol_2eproto() {
  protobuf_AddDesc_property_5fchanged_5fmsg_5fprotocol_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "property_changed_msg_protocol.proto");
  GOOGLE_CHECK(file != NULL);
  PropertyChangedMsgProtocol_descriptor_ = file->message_type(0);
  static const int PropertyChangedMsgProtocol_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PropertyChangedMsgProtocol, player_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PropertyChangedMsgProtocol, property_ids_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PropertyChangedMsgProtocol, new_properties_),
  };
  PropertyChangedMsgProtocol_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PropertyChangedMsgProtocol_descriptor_,
      PropertyChangedMsgProtocol::default_instance_,
      PropertyChangedMsgProtocol_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PropertyChangedMsgProtocol, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PropertyChangedMsgProtocol, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PropertyChangedMsgProtocol));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_property_5fchanged_5fmsg_5fprotocol_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PropertyChangedMsgProtocol_descriptor_, &PropertyChangedMsgProtocol::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_property_5fchanged_5fmsg_5fprotocol_2eproto() {
  delete PropertyChangedMsgProtocol::default_instance_;
  delete PropertyChangedMsgProtocol_reflection_;
}

void protobuf_AddDesc_property_5fchanged_5fmsg_5fprotocol_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n#property_changed_msg_protocol.proto\022\016g"
    "amer.protocol\"]\n\032PropertyChangedMsgProto"
    "col\022\021\n\tplayer_id\030\001 \002(\r\022\024\n\014property_ids\030\002"
    " \003(\r\022\026\n\016new_properties\030\003 \003(\t", 148);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "property_changed_msg_protocol.proto", &protobuf_RegisterTypes);
  PropertyChangedMsgProtocol::default_instance_ = new PropertyChangedMsgProtocol();
  PropertyChangedMsgProtocol::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_property_5fchanged_5fmsg_5fprotocol_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_property_5fchanged_5fmsg_5fprotocol_2eproto {
  StaticDescriptorInitializer_property_5fchanged_5fmsg_5fprotocol_2eproto() {
    protobuf_AddDesc_property_5fchanged_5fmsg_5fprotocol_2eproto();
  }
} static_descriptor_initializer_property_5fchanged_5fmsg_5fprotocol_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int PropertyChangedMsgProtocol::kPlayerIdFieldNumber;
const int PropertyChangedMsgProtocol::kPropertyIdsFieldNumber;
const int PropertyChangedMsgProtocol::kNewPropertiesFieldNumber;
#endif  // !_MSC_VER

PropertyChangedMsgProtocol::PropertyChangedMsgProtocol()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:gamer.protocol.PropertyChangedMsgProtocol)
}

void PropertyChangedMsgProtocol::InitAsDefaultInstance() {
}

PropertyChangedMsgProtocol::PropertyChangedMsgProtocol(const PropertyChangedMsgProtocol& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:gamer.protocol.PropertyChangedMsgProtocol)
}

void PropertyChangedMsgProtocol::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  player_id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PropertyChangedMsgProtocol::~PropertyChangedMsgProtocol() {
  // @@protoc_insertion_point(destructor:gamer.protocol.PropertyChangedMsgProtocol)
  SharedDtor();
}

void PropertyChangedMsgProtocol::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PropertyChangedMsgProtocol::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PropertyChangedMsgProtocol::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PropertyChangedMsgProtocol_descriptor_;
}

const PropertyChangedMsgProtocol& PropertyChangedMsgProtocol::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_property_5fchanged_5fmsg_5fprotocol_2eproto();
  return *default_instance_;
}

PropertyChangedMsgProtocol* PropertyChangedMsgProtocol::default_instance_ = NULL;

PropertyChangedMsgProtocol* PropertyChangedMsgProtocol::New() const {
  return new PropertyChangedMsgProtocol;
}

void PropertyChangedMsgProtocol::Clear() {
  player_id_ = 0u;
  property_ids_.Clear();
  new_properties_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PropertyChangedMsgProtocol::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:gamer.protocol.PropertyChangedMsgProtocol)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 player_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &player_id_)));
          set_has_player_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_property_ids;
        break;
      }

      // repeated uint32 property_ids = 2;
      case 2: {
        if (tag == 16) {
         parse_property_ids:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 16, input, this->mutable_property_ids())));
        } else if (tag == 18) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_property_ids())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_property_ids;
        if (input->ExpectTag(26)) goto parse_new_properties;
        break;
      }

      // repeated string new_properties = 3;
      case 3: {
        if (tag == 26) {
         parse_new_properties:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_new_properties()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->new_properties(this->new_properties_size() - 1).data(),
            this->new_properties(this->new_properties_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "new_properties");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_new_properties;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:gamer.protocol.PropertyChangedMsgProtocol)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:gamer.protocol.PropertyChangedMsgProtocol)
  return false;
#undef DO_
}

void PropertyChangedMsgProtocol::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:gamer.protocol.PropertyChangedMsgProtocol)
  // required uint32 player_id = 1;
  if (has_player_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->player_id(), output);
  }

  // repeated uint32 property_ids = 2;
  for (int i = 0; i < this->property_ids_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      2, this->property_ids(i), output);
  }

  // repeated string new_properties = 3;
  for (int i = 0; i < this->new_properties_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
    this->new_properties(i).data(), this->new_properties(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE,
    "new_properties");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->new_properties(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:gamer.protocol.PropertyChangedMsgProtocol)
}

::google::protobuf::uint8* PropertyChangedMsgProtocol::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:gamer.protocol.PropertyChangedMsgProtocol)
  // required uint32 player_id = 1;
  if (has_player_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->player_id(), target);
  }

  // repeated uint32 property_ids = 2;
  for (int i = 0; i < this->property_ids_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(2, this->property_ids(i), target);
  }

  // repeated string new_properties = 3;
  for (int i = 0; i < this->new_properties_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->new_properties(i).data(), this->new_properties(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "new_properties");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(3, this->new_properties(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:gamer.protocol.PropertyChangedMsgProtocol)
  return target;
}

int PropertyChangedMsgProtocol::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 player_id = 1;
    if (has_player_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->player_id());
    }

  }
  // repeated uint32 property_ids = 2;
  {
    int data_size = 0;
    for (int i = 0; i < this->property_ids_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->property_ids(i));
    }
    total_size += 1 * this->property_ids_size() + data_size;
  }

  // repeated string new_properties = 3;
  total_size += 1 * this->new_properties_size();
  for (int i = 0; i < this->new_properties_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->new_properties(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PropertyChangedMsgProtocol::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PropertyChangedMsgProtocol* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PropertyChangedMsgProtocol*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PropertyChangedMsgProtocol::MergeFrom(const PropertyChangedMsgProtocol& from) {
  GOOGLE_CHECK_NE(&from, this);
  property_ids_.MergeFrom(from.property_ids_);
  new_properties_.MergeFrom(from.new_properties_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_player_id()) {
      set_player_id(from.player_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PropertyChangedMsgProtocol::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PropertyChangedMsgProtocol::CopyFrom(const PropertyChangedMsgProtocol& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PropertyChangedMsgProtocol::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void PropertyChangedMsgProtocol::Swap(PropertyChangedMsgProtocol* other) {
  if (other != this) {
    std::swap(player_id_, other->player_id_);
    property_ids_.Swap(&other->property_ids_);
    new_properties_.Swap(&other->new_properties_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PropertyChangedMsgProtocol::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PropertyChangedMsgProtocol_descriptor_;
  metadata.reflection = PropertyChangedMsgProtocol_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace protocol
}  // namespace gamer

// @@protoc_insertion_point(global_scope)
