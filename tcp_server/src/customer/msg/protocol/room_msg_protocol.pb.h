// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: room_msg_protocol.proto

#ifndef PROTOBUF_room_5fmsg_5fprotocol_2eproto__INCLUDED
#define PROTOBUF_room_5fmsg_5fprotocol_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2006000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace gamer {
namespace protocol {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_room_5fmsg_5fprotocol_2eproto();
void protobuf_AssignDesc_room_5fmsg_5fprotocol_2eproto();
void protobuf_ShutdownFile_room_5fmsg_5fprotocol_2eproto();

class RoomMsgProtocol;

// ===================================================================

class RoomMsgProtocol : public ::google::protobuf::Message {
 public:
  RoomMsgProtocol();
  virtual ~RoomMsgProtocol();

  RoomMsgProtocol(const RoomMsgProtocol& from);

  inline RoomMsgProtocol& operator=(const RoomMsgProtocol& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const RoomMsgProtocol& default_instance();

  void Swap(RoomMsgProtocol* other);

  // implements Message ----------------------------------------------

  RoomMsgProtocol* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const RoomMsgProtocol& from);
  void MergeFrom(const RoomMsgProtocol& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 room_id = 1;
  inline bool has_room_id() const;
  inline void clear_room_id();
  static const int kRoomIdFieldNumber = 1;
  inline ::google::protobuf::int32 room_id() const;
  inline void set_room_id(::google::protobuf::int32 value);

  // required int32 players_num = 2;
  inline bool has_players_num() const;
  inline void clear_players_num();
  static const int kPlayersNumFieldNumber = 2;
  inline ::google::protobuf::int32 players_num() const;
  inline void set_players_num(::google::protobuf::int32 value);

  // required int32 cur_round = 3;
  inline bool has_cur_round() const;
  inline void clear_cur_round();
  static const int kCurRoundFieldNumber = 3;
  inline ::google::protobuf::int32 cur_round() const;
  inline void set_cur_round(::google::protobuf::int32 value);

  // required int32 total_round = 4;
  inline bool has_total_round() const;
  inline void clear_total_round();
  static const int kTotalRoundFieldNumber = 4;
  inline ::google::protobuf::int32 total_round() const;
  inline void set_total_round(::google::protobuf::int32 value);

  // required int32 remain_cards_num = 5;
  inline bool has_remain_cards_num() const;
  inline void clear_remain_cards_num();
  static const int kRemainCardsNumFieldNumber = 5;
  inline ::google::protobuf::int32 remain_cards_num() const;
  inline void set_remain_cards_num(::google::protobuf::int32 value);

  // required int32 cur_acting_player_id = 6;
  inline bool has_cur_acting_player_id() const;
  inline void clear_cur_acting_player_id();
  static const int kCurActingPlayerIdFieldNumber = 6;
  inline ::google::protobuf::int32 cur_acting_player_id() const;
  inline void set_cur_acting_player_id(::google::protobuf::int32 value);

  // required int32 cur_action_id = 7;
  inline bool has_cur_action_id() const;
  inline void clear_cur_action_id();
  static const int kCurActionIdFieldNumber = 7;
  inline ::google::protobuf::int32 cur_action_id() const;
  inline void set_cur_action_id(::google::protobuf::int32 value);

  // required int32 my_player_id = 8;
  inline bool has_my_player_id() const;
  inline void clear_my_player_id();
  static const int kMyPlayerIdFieldNumber = 8;
  inline ::google::protobuf::int32 my_player_id() const;
  inline void set_my_player_id(::google::protobuf::int32 value);

  // repeated int32 my_visible_hand_cards = 9;
  inline int my_visible_hand_cards_size() const;
  inline void clear_my_visible_hand_cards();
  static const int kMyVisibleHandCardsFieldNumber = 9;
  inline ::google::protobuf::int32 my_visible_hand_cards(int index) const;
  inline void set_my_visible_hand_cards(int index, ::google::protobuf::int32 value);
  inline void add_my_visible_hand_cards(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      my_visible_hand_cards() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_my_visible_hand_cards();

  // repeated int32 my_invisible_hand_cards = 10;
  inline int my_invisible_hand_cards_size() const;
  inline void clear_my_invisible_hand_cards();
  static const int kMyInvisibleHandCardsFieldNumber = 10;
  inline ::google::protobuf::int32 my_invisible_hand_cards(int index) const;
  inline void set_my_invisible_hand_cards(int index, ::google::protobuf::int32 value);
  inline void add_my_invisible_hand_cards(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      my_invisible_hand_cards() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_my_invisible_hand_cards();

  // repeated int32 my_discards = 11;
  inline int my_discards_size() const;
  inline void clear_my_discards();
  static const int kMyDiscardsFieldNumber = 11;
  inline ::google::protobuf::int32 my_discards(int index) const;
  inline void set_my_discards(int index, ::google::protobuf::int32 value);
  inline void add_my_discards(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      my_discards() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_my_discards();

  // repeated int32 my_flower_cards = 12;
  inline int my_flower_cards_size() const;
  inline void clear_my_flower_cards();
  static const int kMyFlowerCardsFieldNumber = 12;
  inline ::google::protobuf::int32 my_flower_cards(int index) const;
  inline void set_my_flower_cards(int index, ::google::protobuf::int32 value);
  inline void add_my_flower_cards(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      my_flower_cards() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_my_flower_cards();

  // repeated int32 my_season_cards = 13;
  inline int my_season_cards_size() const;
  inline void clear_my_season_cards();
  static const int kMySeasonCardsFieldNumber = 13;
  inline ::google::protobuf::int32 my_season_cards(int index) const;
  inline void set_my_season_cards(int index, ::google::protobuf::int32 value);
  inline void add_my_season_cards(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      my_season_cards() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_my_season_cards();

  // repeated int32 my_waiting_cards = 14;
  inline int my_waiting_cards_size() const;
  inline void clear_my_waiting_cards();
  static const int kMyWaitingCardsFieldNumber = 14;
  inline ::google::protobuf::int32 my_waiting_cards(int index) const;
  inline void set_my_waiting_cards(int index, ::google::protobuf::int32 value);
  inline void add_my_waiting_cards(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      my_waiting_cards() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_my_waiting_cards();

  // required int32 left_player_id = 15;
  inline bool has_left_player_id() const;
  inline void clear_left_player_id();
  static const int kLeftPlayerIdFieldNumber = 15;
  inline ::google::protobuf::int32 left_player_id() const;
  inline void set_left_player_id(::google::protobuf::int32 value);

  // repeated int32 left_player_visible_hand_cards = 16;
  inline int left_player_visible_hand_cards_size() const;
  inline void clear_left_player_visible_hand_cards();
  static const int kLeftPlayerVisibleHandCardsFieldNumber = 16;
  inline ::google::protobuf::int32 left_player_visible_hand_cards(int index) const;
  inline void set_left_player_visible_hand_cards(int index, ::google::protobuf::int32 value);
  inline void add_left_player_visible_hand_cards(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      left_player_visible_hand_cards() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_left_player_visible_hand_cards();

  // required int32 left_player_remain_hand_cards_num = 17;
  inline bool has_left_player_remain_hand_cards_num() const;
  inline void clear_left_player_remain_hand_cards_num();
  static const int kLeftPlayerRemainHandCardsNumFieldNumber = 17;
  inline ::google::protobuf::int32 left_player_remain_hand_cards_num() const;
  inline void set_left_player_remain_hand_cards_num(::google::protobuf::int32 value);

  // repeated int32 left_player_discards = 18;
  inline int left_player_discards_size() const;
  inline void clear_left_player_discards();
  static const int kLeftPlayerDiscardsFieldNumber = 18;
  inline ::google::protobuf::int32 left_player_discards(int index) const;
  inline void set_left_player_discards(int index, ::google::protobuf::int32 value);
  inline void add_left_player_discards(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      left_player_discards() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_left_player_discards();

  // required int32 left_player_flower_cards = 19;
  inline bool has_left_player_flower_cards() const;
  inline void clear_left_player_flower_cards();
  static const int kLeftPlayerFlowerCardsFieldNumber = 19;
  inline ::google::protobuf::int32 left_player_flower_cards() const;
  inline void set_left_player_flower_cards(::google::protobuf::int32 value);

  // required int32 left_player_season_cards = 20;
  inline bool has_left_player_season_cards() const;
  inline void clear_left_player_season_cards();
  static const int kLeftPlayerSeasonCardsFieldNumber = 20;
  inline ::google::protobuf::int32 left_player_season_cards() const;
  inline void set_left_player_season_cards(::google::protobuf::int32 value);

  // required bool left_player_is_waiting = 21;
  inline bool has_left_player_is_waiting() const;
  inline void clear_left_player_is_waiting();
  static const int kLeftPlayerIsWaitingFieldNumber = 21;
  inline bool left_player_is_waiting() const;
  inline void set_left_player_is_waiting(bool value);

  // required int32 right_player_id = 22;
  inline bool has_right_player_id() const;
  inline void clear_right_player_id();
  static const int kRightPlayerIdFieldNumber = 22;
  inline ::google::protobuf::int32 right_player_id() const;
  inline void set_right_player_id(::google::protobuf::int32 value);

  // repeated int32 right_player_visible_hand_cards = 23;
  inline int right_player_visible_hand_cards_size() const;
  inline void clear_right_player_visible_hand_cards();
  static const int kRightPlayerVisibleHandCardsFieldNumber = 23;
  inline ::google::protobuf::int32 right_player_visible_hand_cards(int index) const;
  inline void set_right_player_visible_hand_cards(int index, ::google::protobuf::int32 value);
  inline void add_right_player_visible_hand_cards(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      right_player_visible_hand_cards() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_right_player_visible_hand_cards();

  // required int32 right_player_remain_hand_cards_num = 24;
  inline bool has_right_player_remain_hand_cards_num() const;
  inline void clear_right_player_remain_hand_cards_num();
  static const int kRightPlayerRemainHandCardsNumFieldNumber = 24;
  inline ::google::protobuf::int32 right_player_remain_hand_cards_num() const;
  inline void set_right_player_remain_hand_cards_num(::google::protobuf::int32 value);

  // repeated int32 right_player_discards = 25;
  inline int right_player_discards_size() const;
  inline void clear_right_player_discards();
  static const int kRightPlayerDiscardsFieldNumber = 25;
  inline ::google::protobuf::int32 right_player_discards(int index) const;
  inline void set_right_player_discards(int index, ::google::protobuf::int32 value);
  inline void add_right_player_discards(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      right_player_discards() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_right_player_discards();

  // required int32 right_player_flower_cards = 26;
  inline bool has_right_player_flower_cards() const;
  inline void clear_right_player_flower_cards();
  static const int kRightPlayerFlowerCardsFieldNumber = 26;
  inline ::google::protobuf::int32 right_player_flower_cards() const;
  inline void set_right_player_flower_cards(::google::protobuf::int32 value);

  // required int32 right_player_season_cards = 27;
  inline bool has_right_player_season_cards() const;
  inline void clear_right_player_season_cards();
  static const int kRightPlayerSeasonCardsFieldNumber = 27;
  inline ::google::protobuf::int32 right_player_season_cards() const;
  inline void set_right_player_season_cards(::google::protobuf::int32 value);

  // required bool right_player_is_waiting = 28;
  inline bool has_right_player_is_waiting() const;
  inline void clear_right_player_is_waiting();
  static const int kRightPlayerIsWaitingFieldNumber = 28;
  inline bool right_player_is_waiting() const;
  inline void set_right_player_is_waiting(bool value);

  // required int32 opposite_player_id = 29;
  inline bool has_opposite_player_id() const;
  inline void clear_opposite_player_id();
  static const int kOppositePlayerIdFieldNumber = 29;
  inline ::google::protobuf::int32 opposite_player_id() const;
  inline void set_opposite_player_id(::google::protobuf::int32 value);

  // repeated int32 opposite_player_visible_hand_cards = 30;
  inline int opposite_player_visible_hand_cards_size() const;
  inline void clear_opposite_player_visible_hand_cards();
  static const int kOppositePlayerVisibleHandCardsFieldNumber = 30;
  inline ::google::protobuf::int32 opposite_player_visible_hand_cards(int index) const;
  inline void set_opposite_player_visible_hand_cards(int index, ::google::protobuf::int32 value);
  inline void add_opposite_player_visible_hand_cards(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      opposite_player_visible_hand_cards() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_opposite_player_visible_hand_cards();

  // required int32 opposite_player_remain_hand_cards_num = 31;
  inline bool has_opposite_player_remain_hand_cards_num() const;
  inline void clear_opposite_player_remain_hand_cards_num();
  static const int kOppositePlayerRemainHandCardsNumFieldNumber = 31;
  inline ::google::protobuf::int32 opposite_player_remain_hand_cards_num() const;
  inline void set_opposite_player_remain_hand_cards_num(::google::protobuf::int32 value);

  // repeated int32 opposite_player_discards = 32;
  inline int opposite_player_discards_size() const;
  inline void clear_opposite_player_discards();
  static const int kOppositePlayerDiscardsFieldNumber = 32;
  inline ::google::protobuf::int32 opposite_player_discards(int index) const;
  inline void set_opposite_player_discards(int index, ::google::protobuf::int32 value);
  inline void add_opposite_player_discards(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      opposite_player_discards() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_opposite_player_discards();

  // required int32 opposite_player_flower_cards = 33;
  inline bool has_opposite_player_flower_cards() const;
  inline void clear_opposite_player_flower_cards();
  static const int kOppositePlayerFlowerCardsFieldNumber = 33;
  inline ::google::protobuf::int32 opposite_player_flower_cards() const;
  inline void set_opposite_player_flower_cards(::google::protobuf::int32 value);

  // required int32 opposite_player_season_cards = 34;
  inline bool has_opposite_player_season_cards() const;
  inline void clear_opposite_player_season_cards();
  static const int kOppositePlayerSeasonCardsFieldNumber = 34;
  inline ::google::protobuf::int32 opposite_player_season_cards() const;
  inline void set_opposite_player_season_cards(::google::protobuf::int32 value);

  // required bool opposite_player_is_waiting = 35;
  inline bool has_opposite_player_is_waiting() const;
  inline void clear_opposite_player_is_waiting();
  static const int kOppositePlayerIsWaitingFieldNumber = 35;
  inline bool opposite_player_is_waiting() const;
  inline void set_opposite_player_is_waiting(bool value);

  // @@protoc_insertion_point(class_scope:gamer.protocol.RoomMsgProtocol)
 private:
  inline void set_has_room_id();
  inline void clear_has_room_id();
  inline void set_has_players_num();
  inline void clear_has_players_num();
  inline void set_has_cur_round();
  inline void clear_has_cur_round();
  inline void set_has_total_round();
  inline void clear_has_total_round();
  inline void set_has_remain_cards_num();
  inline void clear_has_remain_cards_num();
  inline void set_has_cur_acting_player_id();
  inline void clear_has_cur_acting_player_id();
  inline void set_has_cur_action_id();
  inline void clear_has_cur_action_id();
  inline void set_has_my_player_id();
  inline void clear_has_my_player_id();
  inline void set_has_left_player_id();
  inline void clear_has_left_player_id();
  inline void set_has_left_player_remain_hand_cards_num();
  inline void clear_has_left_player_remain_hand_cards_num();
  inline void set_has_left_player_flower_cards();
  inline void clear_has_left_player_flower_cards();
  inline void set_has_left_player_season_cards();
  inline void clear_has_left_player_season_cards();
  inline void set_has_left_player_is_waiting();
  inline void clear_has_left_player_is_waiting();
  inline void set_has_right_player_id();
  inline void clear_has_right_player_id();
  inline void set_has_right_player_remain_hand_cards_num();
  inline void clear_has_right_player_remain_hand_cards_num();
  inline void set_has_right_player_flower_cards();
  inline void clear_has_right_player_flower_cards();
  inline void set_has_right_player_season_cards();
  inline void clear_has_right_player_season_cards();
  inline void set_has_right_player_is_waiting();
  inline void clear_has_right_player_is_waiting();
  inline void set_has_opposite_player_id();
  inline void clear_has_opposite_player_id();
  inline void set_has_opposite_player_remain_hand_cards_num();
  inline void clear_has_opposite_player_remain_hand_cards_num();
  inline void set_has_opposite_player_flower_cards();
  inline void clear_has_opposite_player_flower_cards();
  inline void set_has_opposite_player_season_cards();
  inline void clear_has_opposite_player_season_cards();
  inline void set_has_opposite_player_is_waiting();
  inline void clear_has_opposite_player_is_waiting();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[2];
  ::google::protobuf::int32 room_id_;
  ::google::protobuf::int32 players_num_;
  ::google::protobuf::int32 cur_round_;
  ::google::protobuf::int32 total_round_;
  ::google::protobuf::int32 remain_cards_num_;
  ::google::protobuf::int32 cur_acting_player_id_;
  ::google::protobuf::int32 cur_action_id_;
  ::google::protobuf::int32 my_player_id_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > my_visible_hand_cards_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > my_invisible_hand_cards_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > my_discards_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > my_flower_cards_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > my_season_cards_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > my_waiting_cards_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > left_player_visible_hand_cards_;
  ::google::protobuf::int32 left_player_id_;
  ::google::protobuf::int32 left_player_remain_hand_cards_num_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > left_player_discards_;
  ::google::protobuf::int32 left_player_flower_cards_;
  ::google::protobuf::int32 left_player_season_cards_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > right_player_visible_hand_cards_;
  ::google::protobuf::int32 right_player_id_;
  ::google::protobuf::int32 right_player_remain_hand_cards_num_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > right_player_discards_;
  ::google::protobuf::int32 right_player_flower_cards_;
  ::google::protobuf::int32 right_player_season_cards_;
  bool left_player_is_waiting_;
  bool right_player_is_waiting_;
  bool opposite_player_is_waiting_;
  ::google::protobuf::int32 opposite_player_id_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > opposite_player_visible_hand_cards_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > opposite_player_discards_;
  ::google::protobuf::int32 opposite_player_remain_hand_cards_num_;
  ::google::protobuf::int32 opposite_player_flower_cards_;
  ::google::protobuf::int32 opposite_player_season_cards_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_room_5fmsg_5fprotocol_2eproto();
  friend void protobuf_AssignDesc_room_5fmsg_5fprotocol_2eproto();
  friend void protobuf_ShutdownFile_room_5fmsg_5fprotocol_2eproto();

  void InitAsDefaultInstance();
  static RoomMsgProtocol* default_instance_;
};
// ===================================================================


// ===================================================================

// RoomMsgProtocol

// required int32 room_id = 1;
inline bool RoomMsgProtocol::has_room_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void RoomMsgProtocol::set_has_room_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void RoomMsgProtocol::clear_has_room_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void RoomMsgProtocol::clear_room_id() {
  room_id_ = 0;
  clear_has_room_id();
}
inline ::google::protobuf::int32 RoomMsgProtocol::room_id() const {
  // @@protoc_insertion_point(field_get:gamer.protocol.RoomMsgProtocol.room_id)
  return room_id_;
}
inline void RoomMsgProtocol::set_room_id(::google::protobuf::int32 value) {
  set_has_room_id();
  room_id_ = value;
  // @@protoc_insertion_point(field_set:gamer.protocol.RoomMsgProtocol.room_id)
}

// required int32 players_num = 2;
inline bool RoomMsgProtocol::has_players_num() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void RoomMsgProtocol::set_has_players_num() {
  _has_bits_[0] |= 0x00000002u;
}
inline void RoomMsgProtocol::clear_has_players_num() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void RoomMsgProtocol::clear_players_num() {
  players_num_ = 0;
  clear_has_players_num();
}
inline ::google::protobuf::int32 RoomMsgProtocol::players_num() const {
  // @@protoc_insertion_point(field_get:gamer.protocol.RoomMsgProtocol.players_num)
  return players_num_;
}
inline void RoomMsgProtocol::set_players_num(::google::protobuf::int32 value) {
  set_has_players_num();
  players_num_ = value;
  // @@protoc_insertion_point(field_set:gamer.protocol.RoomMsgProtocol.players_num)
}

// required int32 cur_round = 3;
inline bool RoomMsgProtocol::has_cur_round() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void RoomMsgProtocol::set_has_cur_round() {
  _has_bits_[0] |= 0x00000004u;
}
inline void RoomMsgProtocol::clear_has_cur_round() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void RoomMsgProtocol::clear_cur_round() {
  cur_round_ = 0;
  clear_has_cur_round();
}
inline ::google::protobuf::int32 RoomMsgProtocol::cur_round() const {
  // @@protoc_insertion_point(field_get:gamer.protocol.RoomMsgProtocol.cur_round)
  return cur_round_;
}
inline void RoomMsgProtocol::set_cur_round(::google::protobuf::int32 value) {
  set_has_cur_round();
  cur_round_ = value;
  // @@protoc_insertion_point(field_set:gamer.protocol.RoomMsgProtocol.cur_round)
}

// required int32 total_round = 4;
inline bool RoomMsgProtocol::has_total_round() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void RoomMsgProtocol::set_has_total_round() {
  _has_bits_[0] |= 0x00000008u;
}
inline void RoomMsgProtocol::clear_has_total_round() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void RoomMsgProtocol::clear_total_round() {
  total_round_ = 0;
  clear_has_total_round();
}
inline ::google::protobuf::int32 RoomMsgProtocol::total_round() const {
  // @@protoc_insertion_point(field_get:gamer.protocol.RoomMsgProtocol.total_round)
  return total_round_;
}
inline void RoomMsgProtocol::set_total_round(::google::protobuf::int32 value) {
  set_has_total_round();
  total_round_ = value;
  // @@protoc_insertion_point(field_set:gamer.protocol.RoomMsgProtocol.total_round)
}

// required int32 remain_cards_num = 5;
inline bool RoomMsgProtocol::has_remain_cards_num() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void RoomMsgProtocol::set_has_remain_cards_num() {
  _has_bits_[0] |= 0x00000010u;
}
inline void RoomMsgProtocol::clear_has_remain_cards_num() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void RoomMsgProtocol::clear_remain_cards_num() {
  remain_cards_num_ = 0;
  clear_has_remain_cards_num();
}
inline ::google::protobuf::int32 RoomMsgProtocol::remain_cards_num() const {
  // @@protoc_insertion_point(field_get:gamer.protocol.RoomMsgProtocol.remain_cards_num)
  return remain_cards_num_;
}
inline void RoomMsgProtocol::set_remain_cards_num(::google::protobuf::int32 value) {
  set_has_remain_cards_num();
  remain_cards_num_ = value;
  // @@protoc_insertion_point(field_set:gamer.protocol.RoomMsgProtocol.remain_cards_num)
}

// required int32 cur_acting_player_id = 6;
inline bool RoomMsgProtocol::has_cur_acting_player_id() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void RoomMsgProtocol::set_has_cur_acting_player_id() {
  _has_bits_[0] |= 0x00000020u;
}
inline void RoomMsgProtocol::clear_has_cur_acting_player_id() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void RoomMsgProtocol::clear_cur_acting_player_id() {
  cur_acting_player_id_ = 0;
  clear_has_cur_acting_player_id();
}
inline ::google::protobuf::int32 RoomMsgProtocol::cur_acting_player_id() const {
  // @@protoc_insertion_point(field_get:gamer.protocol.RoomMsgProtocol.cur_acting_player_id)
  return cur_acting_player_id_;
}
inline void RoomMsgProtocol::set_cur_acting_player_id(::google::protobuf::int32 value) {
  set_has_cur_acting_player_id();
  cur_acting_player_id_ = value;
  // @@protoc_insertion_point(field_set:gamer.protocol.RoomMsgProtocol.cur_acting_player_id)
}

// required int32 cur_action_id = 7;
inline bool RoomMsgProtocol::has_cur_action_id() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void RoomMsgProtocol::set_has_cur_action_id() {
  _has_bits_[0] |= 0x00000040u;
}
inline void RoomMsgProtocol::clear_has_cur_action_id() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void RoomMsgProtocol::clear_cur_action_id() {
  cur_action_id_ = 0;
  clear_has_cur_action_id();
}
inline ::google::protobuf::int32 RoomMsgProtocol::cur_action_id() const {
  // @@protoc_insertion_point(field_get:gamer.protocol.RoomMsgProtocol.cur_action_id)
  return cur_action_id_;
}
inline void RoomMsgProtocol::set_cur_action_id(::google::protobuf::int32 value) {
  set_has_cur_action_id();
  cur_action_id_ = value;
  // @@protoc_insertion_point(field_set:gamer.protocol.RoomMsgProtocol.cur_action_id)
}

// required int32 my_player_id = 8;
inline bool RoomMsgProtocol::has_my_player_id() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void RoomMsgProtocol::set_has_my_player_id() {
  _has_bits_[0] |= 0x00000080u;
}
inline void RoomMsgProtocol::clear_has_my_player_id() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void RoomMsgProtocol::clear_my_player_id() {
  my_player_id_ = 0;
  clear_has_my_player_id();
}
inline ::google::protobuf::int32 RoomMsgProtocol::my_player_id() const {
  // @@protoc_insertion_point(field_get:gamer.protocol.RoomMsgProtocol.my_player_id)
  return my_player_id_;
}
inline void RoomMsgProtocol::set_my_player_id(::google::protobuf::int32 value) {
  set_has_my_player_id();
  my_player_id_ = value;
  // @@protoc_insertion_point(field_set:gamer.protocol.RoomMsgProtocol.my_player_id)
}

// repeated int32 my_visible_hand_cards = 9;
inline int RoomMsgProtocol::my_visible_hand_cards_size() const {
  return my_visible_hand_cards_.size();
}
inline void RoomMsgProtocol::clear_my_visible_hand_cards() {
  my_visible_hand_cards_.Clear();
}
inline ::google::protobuf::int32 RoomMsgProtocol::my_visible_hand_cards(int index) const {
  // @@protoc_insertion_point(field_get:gamer.protocol.RoomMsgProtocol.my_visible_hand_cards)
  return my_visible_hand_cards_.Get(index);
}
inline void RoomMsgProtocol::set_my_visible_hand_cards(int index, ::google::protobuf::int32 value) {
  my_visible_hand_cards_.Set(index, value);
  // @@protoc_insertion_point(field_set:gamer.protocol.RoomMsgProtocol.my_visible_hand_cards)
}
inline void RoomMsgProtocol::add_my_visible_hand_cards(::google::protobuf::int32 value) {
  my_visible_hand_cards_.Add(value);
  // @@protoc_insertion_point(field_add:gamer.protocol.RoomMsgProtocol.my_visible_hand_cards)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
RoomMsgProtocol::my_visible_hand_cards() const {
  // @@protoc_insertion_point(field_list:gamer.protocol.RoomMsgProtocol.my_visible_hand_cards)
  return my_visible_hand_cards_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
RoomMsgProtocol::mutable_my_visible_hand_cards() {
  // @@protoc_insertion_point(field_mutable_list:gamer.protocol.RoomMsgProtocol.my_visible_hand_cards)
  return &my_visible_hand_cards_;
}

// repeated int32 my_invisible_hand_cards = 10;
inline int RoomMsgProtocol::my_invisible_hand_cards_size() const {
  return my_invisible_hand_cards_.size();
}
inline void RoomMsgProtocol::clear_my_invisible_hand_cards() {
  my_invisible_hand_cards_.Clear();
}
inline ::google::protobuf::int32 RoomMsgProtocol::my_invisible_hand_cards(int index) const {
  // @@protoc_insertion_point(field_get:gamer.protocol.RoomMsgProtocol.my_invisible_hand_cards)
  return my_invisible_hand_cards_.Get(index);
}
inline void RoomMsgProtocol::set_my_invisible_hand_cards(int index, ::google::protobuf::int32 value) {
  my_invisible_hand_cards_.Set(index, value);
  // @@protoc_insertion_point(field_set:gamer.protocol.RoomMsgProtocol.my_invisible_hand_cards)
}
inline void RoomMsgProtocol::add_my_invisible_hand_cards(::google::protobuf::int32 value) {
  my_invisible_hand_cards_.Add(value);
  // @@protoc_insertion_point(field_add:gamer.protocol.RoomMsgProtocol.my_invisible_hand_cards)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
RoomMsgProtocol::my_invisible_hand_cards() const {
  // @@protoc_insertion_point(field_list:gamer.protocol.RoomMsgProtocol.my_invisible_hand_cards)
  return my_invisible_hand_cards_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
RoomMsgProtocol::mutable_my_invisible_hand_cards() {
  // @@protoc_insertion_point(field_mutable_list:gamer.protocol.RoomMsgProtocol.my_invisible_hand_cards)
  return &my_invisible_hand_cards_;
}

// repeated int32 my_discards = 11;
inline int RoomMsgProtocol::my_discards_size() const {
  return my_discards_.size();
}
inline void RoomMsgProtocol::clear_my_discards() {
  my_discards_.Clear();
}
inline ::google::protobuf::int32 RoomMsgProtocol::my_discards(int index) const {
  // @@protoc_insertion_point(field_get:gamer.protocol.RoomMsgProtocol.my_discards)
  return my_discards_.Get(index);
}
inline void RoomMsgProtocol::set_my_discards(int index, ::google::protobuf::int32 value) {
  my_discards_.Set(index, value);
  // @@protoc_insertion_point(field_set:gamer.protocol.RoomMsgProtocol.my_discards)
}
inline void RoomMsgProtocol::add_my_discards(::google::protobuf::int32 value) {
  my_discards_.Add(value);
  // @@protoc_insertion_point(field_add:gamer.protocol.RoomMsgProtocol.my_discards)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
RoomMsgProtocol::my_discards() const {
  // @@protoc_insertion_point(field_list:gamer.protocol.RoomMsgProtocol.my_discards)
  return my_discards_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
RoomMsgProtocol::mutable_my_discards() {
  // @@protoc_insertion_point(field_mutable_list:gamer.protocol.RoomMsgProtocol.my_discards)
  return &my_discards_;
}

// repeated int32 my_flower_cards = 12;
inline int RoomMsgProtocol::my_flower_cards_size() const {
  return my_flower_cards_.size();
}
inline void RoomMsgProtocol::clear_my_flower_cards() {
  my_flower_cards_.Clear();
}
inline ::google::protobuf::int32 RoomMsgProtocol::my_flower_cards(int index) const {
  // @@protoc_insertion_point(field_get:gamer.protocol.RoomMsgProtocol.my_flower_cards)
  return my_flower_cards_.Get(index);
}
inline void RoomMsgProtocol::set_my_flower_cards(int index, ::google::protobuf::int32 value) {
  my_flower_cards_.Set(index, value);
  // @@protoc_insertion_point(field_set:gamer.protocol.RoomMsgProtocol.my_flower_cards)
}
inline void RoomMsgProtocol::add_my_flower_cards(::google::protobuf::int32 value) {
  my_flower_cards_.Add(value);
  // @@protoc_insertion_point(field_add:gamer.protocol.RoomMsgProtocol.my_flower_cards)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
RoomMsgProtocol::my_flower_cards() const {
  // @@protoc_insertion_point(field_list:gamer.protocol.RoomMsgProtocol.my_flower_cards)
  return my_flower_cards_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
RoomMsgProtocol::mutable_my_flower_cards() {
  // @@protoc_insertion_point(field_mutable_list:gamer.protocol.RoomMsgProtocol.my_flower_cards)
  return &my_flower_cards_;
}

// repeated int32 my_season_cards = 13;
inline int RoomMsgProtocol::my_season_cards_size() const {
  return my_season_cards_.size();
}
inline void RoomMsgProtocol::clear_my_season_cards() {
  my_season_cards_.Clear();
}
inline ::google::protobuf::int32 RoomMsgProtocol::my_season_cards(int index) const {
  // @@protoc_insertion_point(field_get:gamer.protocol.RoomMsgProtocol.my_season_cards)
  return my_season_cards_.Get(index);
}
inline void RoomMsgProtocol::set_my_season_cards(int index, ::google::protobuf::int32 value) {
  my_season_cards_.Set(index, value);
  // @@protoc_insertion_point(field_set:gamer.protocol.RoomMsgProtocol.my_season_cards)
}
inline void RoomMsgProtocol::add_my_season_cards(::google::protobuf::int32 value) {
  my_season_cards_.Add(value);
  // @@protoc_insertion_point(field_add:gamer.protocol.RoomMsgProtocol.my_season_cards)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
RoomMsgProtocol::my_season_cards() const {
  // @@protoc_insertion_point(field_list:gamer.protocol.RoomMsgProtocol.my_season_cards)
  return my_season_cards_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
RoomMsgProtocol::mutable_my_season_cards() {
  // @@protoc_insertion_point(field_mutable_list:gamer.protocol.RoomMsgProtocol.my_season_cards)
  return &my_season_cards_;
}

// repeated int32 my_waiting_cards = 14;
inline int RoomMsgProtocol::my_waiting_cards_size() const {
  return my_waiting_cards_.size();
}
inline void RoomMsgProtocol::clear_my_waiting_cards() {
  my_waiting_cards_.Clear();
}
inline ::google::protobuf::int32 RoomMsgProtocol::my_waiting_cards(int index) const {
  // @@protoc_insertion_point(field_get:gamer.protocol.RoomMsgProtocol.my_waiting_cards)
  return my_waiting_cards_.Get(index);
}
inline void RoomMsgProtocol::set_my_waiting_cards(int index, ::google::protobuf::int32 value) {
  my_waiting_cards_.Set(index, value);
  // @@protoc_insertion_point(field_set:gamer.protocol.RoomMsgProtocol.my_waiting_cards)
}
inline void RoomMsgProtocol::add_my_waiting_cards(::google::protobuf::int32 value) {
  my_waiting_cards_.Add(value);
  // @@protoc_insertion_point(field_add:gamer.protocol.RoomMsgProtocol.my_waiting_cards)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
RoomMsgProtocol::my_waiting_cards() const {
  // @@protoc_insertion_point(field_list:gamer.protocol.RoomMsgProtocol.my_waiting_cards)
  return my_waiting_cards_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
RoomMsgProtocol::mutable_my_waiting_cards() {
  // @@protoc_insertion_point(field_mutable_list:gamer.protocol.RoomMsgProtocol.my_waiting_cards)
  return &my_waiting_cards_;
}

// required int32 left_player_id = 15;
inline bool RoomMsgProtocol::has_left_player_id() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void RoomMsgProtocol::set_has_left_player_id() {
  _has_bits_[0] |= 0x00004000u;
}
inline void RoomMsgProtocol::clear_has_left_player_id() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void RoomMsgProtocol::clear_left_player_id() {
  left_player_id_ = 0;
  clear_has_left_player_id();
}
inline ::google::protobuf::int32 RoomMsgProtocol::left_player_id() const {
  // @@protoc_insertion_point(field_get:gamer.protocol.RoomMsgProtocol.left_player_id)
  return left_player_id_;
}
inline void RoomMsgProtocol::set_left_player_id(::google::protobuf::int32 value) {
  set_has_left_player_id();
  left_player_id_ = value;
  // @@protoc_insertion_point(field_set:gamer.protocol.RoomMsgProtocol.left_player_id)
}

// repeated int32 left_player_visible_hand_cards = 16;
inline int RoomMsgProtocol::left_player_visible_hand_cards_size() const {
  return left_player_visible_hand_cards_.size();
}
inline void RoomMsgProtocol::clear_left_player_visible_hand_cards() {
  left_player_visible_hand_cards_.Clear();
}
inline ::google::protobuf::int32 RoomMsgProtocol::left_player_visible_hand_cards(int index) const {
  // @@protoc_insertion_point(field_get:gamer.protocol.RoomMsgProtocol.left_player_visible_hand_cards)
  return left_player_visible_hand_cards_.Get(index);
}
inline void RoomMsgProtocol::set_left_player_visible_hand_cards(int index, ::google::protobuf::int32 value) {
  left_player_visible_hand_cards_.Set(index, value);
  // @@protoc_insertion_point(field_set:gamer.protocol.RoomMsgProtocol.left_player_visible_hand_cards)
}
inline void RoomMsgProtocol::add_left_player_visible_hand_cards(::google::protobuf::int32 value) {
  left_player_visible_hand_cards_.Add(value);
  // @@protoc_insertion_point(field_add:gamer.protocol.RoomMsgProtocol.left_player_visible_hand_cards)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
RoomMsgProtocol::left_player_visible_hand_cards() const {
  // @@protoc_insertion_point(field_list:gamer.protocol.RoomMsgProtocol.left_player_visible_hand_cards)
  return left_player_visible_hand_cards_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
RoomMsgProtocol::mutable_left_player_visible_hand_cards() {
  // @@protoc_insertion_point(field_mutable_list:gamer.protocol.RoomMsgProtocol.left_player_visible_hand_cards)
  return &left_player_visible_hand_cards_;
}

// required int32 left_player_remain_hand_cards_num = 17;
inline bool RoomMsgProtocol::has_left_player_remain_hand_cards_num() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
inline void RoomMsgProtocol::set_has_left_player_remain_hand_cards_num() {
  _has_bits_[0] |= 0x00010000u;
}
inline void RoomMsgProtocol::clear_has_left_player_remain_hand_cards_num() {
  _has_bits_[0] &= ~0x00010000u;
}
inline void RoomMsgProtocol::clear_left_player_remain_hand_cards_num() {
  left_player_remain_hand_cards_num_ = 0;
  clear_has_left_player_remain_hand_cards_num();
}
inline ::google::protobuf::int32 RoomMsgProtocol::left_player_remain_hand_cards_num() const {
  // @@protoc_insertion_point(field_get:gamer.protocol.RoomMsgProtocol.left_player_remain_hand_cards_num)
  return left_player_remain_hand_cards_num_;
}
inline void RoomMsgProtocol::set_left_player_remain_hand_cards_num(::google::protobuf::int32 value) {
  set_has_left_player_remain_hand_cards_num();
  left_player_remain_hand_cards_num_ = value;
  // @@protoc_insertion_point(field_set:gamer.protocol.RoomMsgProtocol.left_player_remain_hand_cards_num)
}

// repeated int32 left_player_discards = 18;
inline int RoomMsgProtocol::left_player_discards_size() const {
  return left_player_discards_.size();
}
inline void RoomMsgProtocol::clear_left_player_discards() {
  left_player_discards_.Clear();
}
inline ::google::protobuf::int32 RoomMsgProtocol::left_player_discards(int index) const {
  // @@protoc_insertion_point(field_get:gamer.protocol.RoomMsgProtocol.left_player_discards)
  return left_player_discards_.Get(index);
}
inline void RoomMsgProtocol::set_left_player_discards(int index, ::google::protobuf::int32 value) {
  left_player_discards_.Set(index, value);
  // @@protoc_insertion_point(field_set:gamer.protocol.RoomMsgProtocol.left_player_discards)
}
inline void RoomMsgProtocol::add_left_player_discards(::google::protobuf::int32 value) {
  left_player_discards_.Add(value);
  // @@protoc_insertion_point(field_add:gamer.protocol.RoomMsgProtocol.left_player_discards)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
RoomMsgProtocol::left_player_discards() const {
  // @@protoc_insertion_point(field_list:gamer.protocol.RoomMsgProtocol.left_player_discards)
  return left_player_discards_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
RoomMsgProtocol::mutable_left_player_discards() {
  // @@protoc_insertion_point(field_mutable_list:gamer.protocol.RoomMsgProtocol.left_player_discards)
  return &left_player_discards_;
}

// required int32 left_player_flower_cards = 19;
inline bool RoomMsgProtocol::has_left_player_flower_cards() const {
  return (_has_bits_[0] & 0x00040000u) != 0;
}
inline void RoomMsgProtocol::set_has_left_player_flower_cards() {
  _has_bits_[0] |= 0x00040000u;
}
inline void RoomMsgProtocol::clear_has_left_player_flower_cards() {
  _has_bits_[0] &= ~0x00040000u;
}
inline void RoomMsgProtocol::clear_left_player_flower_cards() {
  left_player_flower_cards_ = 0;
  clear_has_left_player_flower_cards();
}
inline ::google::protobuf::int32 RoomMsgProtocol::left_player_flower_cards() const {
  // @@protoc_insertion_point(field_get:gamer.protocol.RoomMsgProtocol.left_player_flower_cards)
  return left_player_flower_cards_;
}
inline void RoomMsgProtocol::set_left_player_flower_cards(::google::protobuf::int32 value) {
  set_has_left_player_flower_cards();
  left_player_flower_cards_ = value;
  // @@protoc_insertion_point(field_set:gamer.protocol.RoomMsgProtocol.left_player_flower_cards)
}

// required int32 left_player_season_cards = 20;
inline bool RoomMsgProtocol::has_left_player_season_cards() const {
  return (_has_bits_[0] & 0x00080000u) != 0;
}
inline void RoomMsgProtocol::set_has_left_player_season_cards() {
  _has_bits_[0] |= 0x00080000u;
}
inline void RoomMsgProtocol::clear_has_left_player_season_cards() {
  _has_bits_[0] &= ~0x00080000u;
}
inline void RoomMsgProtocol::clear_left_player_season_cards() {
  left_player_season_cards_ = 0;
  clear_has_left_player_season_cards();
}
inline ::google::protobuf::int32 RoomMsgProtocol::left_player_season_cards() const {
  // @@protoc_insertion_point(field_get:gamer.protocol.RoomMsgProtocol.left_player_season_cards)
  return left_player_season_cards_;
}
inline void RoomMsgProtocol::set_left_player_season_cards(::google::protobuf::int32 value) {
  set_has_left_player_season_cards();
  left_player_season_cards_ = value;
  // @@protoc_insertion_point(field_set:gamer.protocol.RoomMsgProtocol.left_player_season_cards)
}

// required bool left_player_is_waiting = 21;
inline bool RoomMsgProtocol::has_left_player_is_waiting() const {
  return (_has_bits_[0] & 0x00100000u) != 0;
}
inline void RoomMsgProtocol::set_has_left_player_is_waiting() {
  _has_bits_[0] |= 0x00100000u;
}
inline void RoomMsgProtocol::clear_has_left_player_is_waiting() {
  _has_bits_[0] &= ~0x00100000u;
}
inline void RoomMsgProtocol::clear_left_player_is_waiting() {
  left_player_is_waiting_ = false;
  clear_has_left_player_is_waiting();
}
inline bool RoomMsgProtocol::left_player_is_waiting() const {
  // @@protoc_insertion_point(field_get:gamer.protocol.RoomMsgProtocol.left_player_is_waiting)
  return left_player_is_waiting_;
}
inline void RoomMsgProtocol::set_left_player_is_waiting(bool value) {
  set_has_left_player_is_waiting();
  left_player_is_waiting_ = value;
  // @@protoc_insertion_point(field_set:gamer.protocol.RoomMsgProtocol.left_player_is_waiting)
}

// required int32 right_player_id = 22;
inline bool RoomMsgProtocol::has_right_player_id() const {
  return (_has_bits_[0] & 0x00200000u) != 0;
}
inline void RoomMsgProtocol::set_has_right_player_id() {
  _has_bits_[0] |= 0x00200000u;
}
inline void RoomMsgProtocol::clear_has_right_player_id() {
  _has_bits_[0] &= ~0x00200000u;
}
inline void RoomMsgProtocol::clear_right_player_id() {
  right_player_id_ = 0;
  clear_has_right_player_id();
}
inline ::google::protobuf::int32 RoomMsgProtocol::right_player_id() const {
  // @@protoc_insertion_point(field_get:gamer.protocol.RoomMsgProtocol.right_player_id)
  return right_player_id_;
}
inline void RoomMsgProtocol::set_right_player_id(::google::protobuf::int32 value) {
  set_has_right_player_id();
  right_player_id_ = value;
  // @@protoc_insertion_point(field_set:gamer.protocol.RoomMsgProtocol.right_player_id)
}

// repeated int32 right_player_visible_hand_cards = 23;
inline int RoomMsgProtocol::right_player_visible_hand_cards_size() const {
  return right_player_visible_hand_cards_.size();
}
inline void RoomMsgProtocol::clear_right_player_visible_hand_cards() {
  right_player_visible_hand_cards_.Clear();
}
inline ::google::protobuf::int32 RoomMsgProtocol::right_player_visible_hand_cards(int index) const {
  // @@protoc_insertion_point(field_get:gamer.protocol.RoomMsgProtocol.right_player_visible_hand_cards)
  return right_player_visible_hand_cards_.Get(index);
}
inline void RoomMsgProtocol::set_right_player_visible_hand_cards(int index, ::google::protobuf::int32 value) {
  right_player_visible_hand_cards_.Set(index, value);
  // @@protoc_insertion_point(field_set:gamer.protocol.RoomMsgProtocol.right_player_visible_hand_cards)
}
inline void RoomMsgProtocol::add_right_player_visible_hand_cards(::google::protobuf::int32 value) {
  right_player_visible_hand_cards_.Add(value);
  // @@protoc_insertion_point(field_add:gamer.protocol.RoomMsgProtocol.right_player_visible_hand_cards)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
RoomMsgProtocol::right_player_visible_hand_cards() const {
  // @@protoc_insertion_point(field_list:gamer.protocol.RoomMsgProtocol.right_player_visible_hand_cards)
  return right_player_visible_hand_cards_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
RoomMsgProtocol::mutable_right_player_visible_hand_cards() {
  // @@protoc_insertion_point(field_mutable_list:gamer.protocol.RoomMsgProtocol.right_player_visible_hand_cards)
  return &right_player_visible_hand_cards_;
}

// required int32 right_player_remain_hand_cards_num = 24;
inline bool RoomMsgProtocol::has_right_player_remain_hand_cards_num() const {
  return (_has_bits_[0] & 0x00800000u) != 0;
}
inline void RoomMsgProtocol::set_has_right_player_remain_hand_cards_num() {
  _has_bits_[0] |= 0x00800000u;
}
inline void RoomMsgProtocol::clear_has_right_player_remain_hand_cards_num() {
  _has_bits_[0] &= ~0x00800000u;
}
inline void RoomMsgProtocol::clear_right_player_remain_hand_cards_num() {
  right_player_remain_hand_cards_num_ = 0;
  clear_has_right_player_remain_hand_cards_num();
}
inline ::google::protobuf::int32 RoomMsgProtocol::right_player_remain_hand_cards_num() const {
  // @@protoc_insertion_point(field_get:gamer.protocol.RoomMsgProtocol.right_player_remain_hand_cards_num)
  return right_player_remain_hand_cards_num_;
}
inline void RoomMsgProtocol::set_right_player_remain_hand_cards_num(::google::protobuf::int32 value) {
  set_has_right_player_remain_hand_cards_num();
  right_player_remain_hand_cards_num_ = value;
  // @@protoc_insertion_point(field_set:gamer.protocol.RoomMsgProtocol.right_player_remain_hand_cards_num)
}

// repeated int32 right_player_discards = 25;
inline int RoomMsgProtocol::right_player_discards_size() const {
  return right_player_discards_.size();
}
inline void RoomMsgProtocol::clear_right_player_discards() {
  right_player_discards_.Clear();
}
inline ::google::protobuf::int32 RoomMsgProtocol::right_player_discards(int index) const {
  // @@protoc_insertion_point(field_get:gamer.protocol.RoomMsgProtocol.right_player_discards)
  return right_player_discards_.Get(index);
}
inline void RoomMsgProtocol::set_right_player_discards(int index, ::google::protobuf::int32 value) {
  right_player_discards_.Set(index, value);
  // @@protoc_insertion_point(field_set:gamer.protocol.RoomMsgProtocol.right_player_discards)
}
inline void RoomMsgProtocol::add_right_player_discards(::google::protobuf::int32 value) {
  right_player_discards_.Add(value);
  // @@protoc_insertion_point(field_add:gamer.protocol.RoomMsgProtocol.right_player_discards)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
RoomMsgProtocol::right_player_discards() const {
  // @@protoc_insertion_point(field_list:gamer.protocol.RoomMsgProtocol.right_player_discards)
  return right_player_discards_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
RoomMsgProtocol::mutable_right_player_discards() {
  // @@protoc_insertion_point(field_mutable_list:gamer.protocol.RoomMsgProtocol.right_player_discards)
  return &right_player_discards_;
}

// required int32 right_player_flower_cards = 26;
inline bool RoomMsgProtocol::has_right_player_flower_cards() const {
  return (_has_bits_[0] & 0x02000000u) != 0;
}
inline void RoomMsgProtocol::set_has_right_player_flower_cards() {
  _has_bits_[0] |= 0x02000000u;
}
inline void RoomMsgProtocol::clear_has_right_player_flower_cards() {
  _has_bits_[0] &= ~0x02000000u;
}
inline void RoomMsgProtocol::clear_right_player_flower_cards() {
  right_player_flower_cards_ = 0;
  clear_has_right_player_flower_cards();
}
inline ::google::protobuf::int32 RoomMsgProtocol::right_player_flower_cards() const {
  // @@protoc_insertion_point(field_get:gamer.protocol.RoomMsgProtocol.right_player_flower_cards)
  return right_player_flower_cards_;
}
inline void RoomMsgProtocol::set_right_player_flower_cards(::google::protobuf::int32 value) {
  set_has_right_player_flower_cards();
  right_player_flower_cards_ = value;
  // @@protoc_insertion_point(field_set:gamer.protocol.RoomMsgProtocol.right_player_flower_cards)
}

// required int32 right_player_season_cards = 27;
inline bool RoomMsgProtocol::has_right_player_season_cards() const {
  return (_has_bits_[0] & 0x04000000u) != 0;
}
inline void RoomMsgProtocol::set_has_right_player_season_cards() {
  _has_bits_[0] |= 0x04000000u;
}
inline void RoomMsgProtocol::clear_has_right_player_season_cards() {
  _has_bits_[0] &= ~0x04000000u;
}
inline void RoomMsgProtocol::clear_right_player_season_cards() {
  right_player_season_cards_ = 0;
  clear_has_right_player_season_cards();
}
inline ::google::protobuf::int32 RoomMsgProtocol::right_player_season_cards() const {
  // @@protoc_insertion_point(field_get:gamer.protocol.RoomMsgProtocol.right_player_season_cards)
  return right_player_season_cards_;
}
inline void RoomMsgProtocol::set_right_player_season_cards(::google::protobuf::int32 value) {
  set_has_right_player_season_cards();
  right_player_season_cards_ = value;
  // @@protoc_insertion_point(field_set:gamer.protocol.RoomMsgProtocol.right_player_season_cards)
}

// required bool right_player_is_waiting = 28;
inline bool RoomMsgProtocol::has_right_player_is_waiting() const {
  return (_has_bits_[0] & 0x08000000u) != 0;
}
inline void RoomMsgProtocol::set_has_right_player_is_waiting() {
  _has_bits_[0] |= 0x08000000u;
}
inline void RoomMsgProtocol::clear_has_right_player_is_waiting() {
  _has_bits_[0] &= ~0x08000000u;
}
inline void RoomMsgProtocol::clear_right_player_is_waiting() {
  right_player_is_waiting_ = false;
  clear_has_right_player_is_waiting();
}
inline bool RoomMsgProtocol::right_player_is_waiting() const {
  // @@protoc_insertion_point(field_get:gamer.protocol.RoomMsgProtocol.right_player_is_waiting)
  return right_player_is_waiting_;
}
inline void RoomMsgProtocol::set_right_player_is_waiting(bool value) {
  set_has_right_player_is_waiting();
  right_player_is_waiting_ = value;
  // @@protoc_insertion_point(field_set:gamer.protocol.RoomMsgProtocol.right_player_is_waiting)
}

// required int32 opposite_player_id = 29;
inline bool RoomMsgProtocol::has_opposite_player_id() const {
  return (_has_bits_[0] & 0x10000000u) != 0;
}
inline void RoomMsgProtocol::set_has_opposite_player_id() {
  _has_bits_[0] |= 0x10000000u;
}
inline void RoomMsgProtocol::clear_has_opposite_player_id() {
  _has_bits_[0] &= ~0x10000000u;
}
inline void RoomMsgProtocol::clear_opposite_player_id() {
  opposite_player_id_ = 0;
  clear_has_opposite_player_id();
}
inline ::google::protobuf::int32 RoomMsgProtocol::opposite_player_id() const {
  // @@protoc_insertion_point(field_get:gamer.protocol.RoomMsgProtocol.opposite_player_id)
  return opposite_player_id_;
}
inline void RoomMsgProtocol::set_opposite_player_id(::google::protobuf::int32 value) {
  set_has_opposite_player_id();
  opposite_player_id_ = value;
  // @@protoc_insertion_point(field_set:gamer.protocol.RoomMsgProtocol.opposite_player_id)
}

// repeated int32 opposite_player_visible_hand_cards = 30;
inline int RoomMsgProtocol::opposite_player_visible_hand_cards_size() const {
  return opposite_player_visible_hand_cards_.size();
}
inline void RoomMsgProtocol::clear_opposite_player_visible_hand_cards() {
  opposite_player_visible_hand_cards_.Clear();
}
inline ::google::protobuf::int32 RoomMsgProtocol::opposite_player_visible_hand_cards(int index) const {
  // @@protoc_insertion_point(field_get:gamer.protocol.RoomMsgProtocol.opposite_player_visible_hand_cards)
  return opposite_player_visible_hand_cards_.Get(index);
}
inline void RoomMsgProtocol::set_opposite_player_visible_hand_cards(int index, ::google::protobuf::int32 value) {
  opposite_player_visible_hand_cards_.Set(index, value);
  // @@protoc_insertion_point(field_set:gamer.protocol.RoomMsgProtocol.opposite_player_visible_hand_cards)
}
inline void RoomMsgProtocol::add_opposite_player_visible_hand_cards(::google::protobuf::int32 value) {
  opposite_player_visible_hand_cards_.Add(value);
  // @@protoc_insertion_point(field_add:gamer.protocol.RoomMsgProtocol.opposite_player_visible_hand_cards)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
RoomMsgProtocol::opposite_player_visible_hand_cards() const {
  // @@protoc_insertion_point(field_list:gamer.protocol.RoomMsgProtocol.opposite_player_visible_hand_cards)
  return opposite_player_visible_hand_cards_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
RoomMsgProtocol::mutable_opposite_player_visible_hand_cards() {
  // @@protoc_insertion_point(field_mutable_list:gamer.protocol.RoomMsgProtocol.opposite_player_visible_hand_cards)
  return &opposite_player_visible_hand_cards_;
}

// required int32 opposite_player_remain_hand_cards_num = 31;
inline bool RoomMsgProtocol::has_opposite_player_remain_hand_cards_num() const {
  return (_has_bits_[0] & 0x40000000u) != 0;
}
inline void RoomMsgProtocol::set_has_opposite_player_remain_hand_cards_num() {
  _has_bits_[0] |= 0x40000000u;
}
inline void RoomMsgProtocol::clear_has_opposite_player_remain_hand_cards_num() {
  _has_bits_[0] &= ~0x40000000u;
}
inline void RoomMsgProtocol::clear_opposite_player_remain_hand_cards_num() {
  opposite_player_remain_hand_cards_num_ = 0;
  clear_has_opposite_player_remain_hand_cards_num();
}
inline ::google::protobuf::int32 RoomMsgProtocol::opposite_player_remain_hand_cards_num() const {
  // @@protoc_insertion_point(field_get:gamer.protocol.RoomMsgProtocol.opposite_player_remain_hand_cards_num)
  return opposite_player_remain_hand_cards_num_;
}
inline void RoomMsgProtocol::set_opposite_player_remain_hand_cards_num(::google::protobuf::int32 value) {
  set_has_opposite_player_remain_hand_cards_num();
  opposite_player_remain_hand_cards_num_ = value;
  // @@protoc_insertion_point(field_set:gamer.protocol.RoomMsgProtocol.opposite_player_remain_hand_cards_num)
}

// repeated int32 opposite_player_discards = 32;
inline int RoomMsgProtocol::opposite_player_discards_size() const {
  return opposite_player_discards_.size();
}
inline void RoomMsgProtocol::clear_opposite_player_discards() {
  opposite_player_discards_.Clear();
}
inline ::google::protobuf::int32 RoomMsgProtocol::opposite_player_discards(int index) const {
  // @@protoc_insertion_point(field_get:gamer.protocol.RoomMsgProtocol.opposite_player_discards)
  return opposite_player_discards_.Get(index);
}
inline void RoomMsgProtocol::set_opposite_player_discards(int index, ::google::protobuf::int32 value) {
  opposite_player_discards_.Set(index, value);
  // @@protoc_insertion_point(field_set:gamer.protocol.RoomMsgProtocol.opposite_player_discards)
}
inline void RoomMsgProtocol::add_opposite_player_discards(::google::protobuf::int32 value) {
  opposite_player_discards_.Add(value);
  // @@protoc_insertion_point(field_add:gamer.protocol.RoomMsgProtocol.opposite_player_discards)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
RoomMsgProtocol::opposite_player_discards() const {
  // @@protoc_insertion_point(field_list:gamer.protocol.RoomMsgProtocol.opposite_player_discards)
  return opposite_player_discards_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
RoomMsgProtocol::mutable_opposite_player_discards() {
  // @@protoc_insertion_point(field_mutable_list:gamer.protocol.RoomMsgProtocol.opposite_player_discards)
  return &opposite_player_discards_;
}

// required int32 opposite_player_flower_cards = 33;
inline bool RoomMsgProtocol::has_opposite_player_flower_cards() const {
  return (_has_bits_[1] & 0x00000001u) != 0;
}
inline void RoomMsgProtocol::set_has_opposite_player_flower_cards() {
  _has_bits_[1] |= 0x00000001u;
}
inline void RoomMsgProtocol::clear_has_opposite_player_flower_cards() {
  _has_bits_[1] &= ~0x00000001u;
}
inline void RoomMsgProtocol::clear_opposite_player_flower_cards() {
  opposite_player_flower_cards_ = 0;
  clear_has_opposite_player_flower_cards();
}
inline ::google::protobuf::int32 RoomMsgProtocol::opposite_player_flower_cards() const {
  // @@protoc_insertion_point(field_get:gamer.protocol.RoomMsgProtocol.opposite_player_flower_cards)
  return opposite_player_flower_cards_;
}
inline void RoomMsgProtocol::set_opposite_player_flower_cards(::google::protobuf::int32 value) {
  set_has_opposite_player_flower_cards();
  opposite_player_flower_cards_ = value;
  // @@protoc_insertion_point(field_set:gamer.protocol.RoomMsgProtocol.opposite_player_flower_cards)
}

// required int32 opposite_player_season_cards = 34;
inline bool RoomMsgProtocol::has_opposite_player_season_cards() const {
  return (_has_bits_[1] & 0x00000002u) != 0;
}
inline void RoomMsgProtocol::set_has_opposite_player_season_cards() {
  _has_bits_[1] |= 0x00000002u;
}
inline void RoomMsgProtocol::clear_has_opposite_player_season_cards() {
  _has_bits_[1] &= ~0x00000002u;
}
inline void RoomMsgProtocol::clear_opposite_player_season_cards() {
  opposite_player_season_cards_ = 0;
  clear_has_opposite_player_season_cards();
}
inline ::google::protobuf::int32 RoomMsgProtocol::opposite_player_season_cards() const {
  // @@protoc_insertion_point(field_get:gamer.protocol.RoomMsgProtocol.opposite_player_season_cards)
  return opposite_player_season_cards_;
}
inline void RoomMsgProtocol::set_opposite_player_season_cards(::google::protobuf::int32 value) {
  set_has_opposite_player_season_cards();
  opposite_player_season_cards_ = value;
  // @@protoc_insertion_point(field_set:gamer.protocol.RoomMsgProtocol.opposite_player_season_cards)
}

// required bool opposite_player_is_waiting = 35;
inline bool RoomMsgProtocol::has_opposite_player_is_waiting() const {
  return (_has_bits_[1] & 0x00000004u) != 0;
}
inline void RoomMsgProtocol::set_has_opposite_player_is_waiting() {
  _has_bits_[1] |= 0x00000004u;
}
inline void RoomMsgProtocol::clear_has_opposite_player_is_waiting() {
  _has_bits_[1] &= ~0x00000004u;
}
inline void RoomMsgProtocol::clear_opposite_player_is_waiting() {
  opposite_player_is_waiting_ = false;
  clear_has_opposite_player_is_waiting();
}
inline bool RoomMsgProtocol::opposite_player_is_waiting() const {
  // @@protoc_insertion_point(field_get:gamer.protocol.RoomMsgProtocol.opposite_player_is_waiting)
  return opposite_player_is_waiting_;
}
inline void RoomMsgProtocol::set_opposite_player_is_waiting(bool value) {
  set_has_opposite_player_is_waiting();
  opposite_player_is_waiting_ = value;
  // @@protoc_insertion_point(field_set:gamer.protocol.RoomMsgProtocol.opposite_player_is_waiting)
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace protocol
}  // namespace gamer

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_room_5fmsg_5fprotocol_2eproto__INCLUDED
