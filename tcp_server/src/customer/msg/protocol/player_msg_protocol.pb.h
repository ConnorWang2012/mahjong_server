// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: player_msg_protocol.proto

#ifndef PROTOBUF_player_5fmsg_5fprotocol_2eproto__INCLUDED
#define PROTOBUF_player_5fmsg_5fprotocol_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2006000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace gamer {
namespace protocol {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_player_5fmsg_5fprotocol_2eproto();
void protobuf_AssignDesc_player_5fmsg_5fprotocol_2eproto();
void protobuf_ShutdownFile_player_5fmsg_5fprotocol_2eproto();

class PlayerMsgProtocol;

// ===================================================================

class PlayerMsgProtocol : public ::google::protobuf::Message {
 public:
  PlayerMsgProtocol();
  virtual ~PlayerMsgProtocol();

  PlayerMsgProtocol(const PlayerMsgProtocol& from);

  inline PlayerMsgProtocol& operator=(const PlayerMsgProtocol& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const PlayerMsgProtocol& default_instance();

  void Swap(PlayerMsgProtocol* other);

  // implements Message ----------------------------------------------

  PlayerMsgProtocol* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PlayerMsgProtocol& from);
  void MergeFrom(const PlayerMsgProtocol& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 player_id = 1;
  inline bool has_player_id() const;
  inline void clear_player_id();
  static const int kPlayerIdFieldNumber = 1;
  inline ::google::protobuf::int32 player_id() const;
  inline void set_player_id(::google::protobuf::int32 value);

  // required string nick_name = 2;
  inline bool has_nick_name() const;
  inline void clear_nick_name();
  static const int kNickNameFieldNumber = 2;
  inline const ::std::string& nick_name() const;
  inline void set_nick_name(const ::std::string& value);
  inline void set_nick_name(const char* value);
  inline void set_nick_name(const char* value, size_t size);
  inline ::std::string* mutable_nick_name();
  inline ::std::string* release_nick_name();
  inline void set_allocated_nick_name(::std::string* nick_name);

  // required int32 game_currency = 3;
  inline bool has_game_currency() const;
  inline void clear_game_currency();
  static const int kGameCurrencyFieldNumber = 3;
  inline ::google::protobuf::int32 game_currency() const;
  inline void set_game_currency(::google::protobuf::int32 value);

  // required int32 level = 4;
  inline bool has_level() const;
  inline void clear_level();
  static const int kLevelFieldNumber = 4;
  inline ::google::protobuf::int32 level() const;
  inline void set_level(::google::protobuf::int32 value);

  // required string level_name = 5;
  inline bool has_level_name() const;
  inline void clear_level_name();
  static const int kLevelNameFieldNumber = 5;
  inline const ::std::string& level_name() const;
  inline void set_level_name(const ::std::string& value);
  inline void set_level_name(const char* value);
  inline void set_level_name(const char* value, size_t size);
  inline ::std::string* mutable_level_name();
  inline ::std::string* release_level_name();
  inline void set_allocated_level_name(::std::string* level_name);

  // @@protoc_insertion_point(class_scope:gamer.protocol.PlayerMsgProtocol)
 private:
  inline void set_has_player_id();
  inline void clear_has_player_id();
  inline void set_has_nick_name();
  inline void clear_has_nick_name();
  inline void set_has_game_currency();
  inline void clear_has_game_currency();
  inline void set_has_level();
  inline void clear_has_level();
  inline void set_has_level_name();
  inline void clear_has_level_name();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* nick_name_;
  ::google::protobuf::int32 player_id_;
  ::google::protobuf::int32 game_currency_;
  ::std::string* level_name_;
  ::google::protobuf::int32 level_;
  friend void  protobuf_AddDesc_player_5fmsg_5fprotocol_2eproto();
  friend void protobuf_AssignDesc_player_5fmsg_5fprotocol_2eproto();
  friend void protobuf_ShutdownFile_player_5fmsg_5fprotocol_2eproto();

  void InitAsDefaultInstance();
  static PlayerMsgProtocol* default_instance_;
};
// ===================================================================


// ===================================================================

// PlayerMsgProtocol

// required int32 player_id = 1;
inline bool PlayerMsgProtocol::has_player_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PlayerMsgProtocol::set_has_player_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PlayerMsgProtocol::clear_has_player_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PlayerMsgProtocol::clear_player_id() {
  player_id_ = 0;
  clear_has_player_id();
}
inline ::google::protobuf::int32 PlayerMsgProtocol::player_id() const {
  // @@protoc_insertion_point(field_get:gamer.protocol.PlayerMsgProtocol.player_id)
  return player_id_;
}
inline void PlayerMsgProtocol::set_player_id(::google::protobuf::int32 value) {
  set_has_player_id();
  player_id_ = value;
  // @@protoc_insertion_point(field_set:gamer.protocol.PlayerMsgProtocol.player_id)
}

// required string nick_name = 2;
inline bool PlayerMsgProtocol::has_nick_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void PlayerMsgProtocol::set_has_nick_name() {
  _has_bits_[0] |= 0x00000002u;
}
inline void PlayerMsgProtocol::clear_has_nick_name() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void PlayerMsgProtocol::clear_nick_name() {
  if (nick_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    nick_name_->clear();
  }
  clear_has_nick_name();
}
inline const ::std::string& PlayerMsgProtocol::nick_name() const {
  // @@protoc_insertion_point(field_get:gamer.protocol.PlayerMsgProtocol.nick_name)
  return *nick_name_;
}
inline void PlayerMsgProtocol::set_nick_name(const ::std::string& value) {
  set_has_nick_name();
  if (nick_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    nick_name_ = new ::std::string;
  }
  nick_name_->assign(value);
  // @@protoc_insertion_point(field_set:gamer.protocol.PlayerMsgProtocol.nick_name)
}
inline void PlayerMsgProtocol::set_nick_name(const char* value) {
  set_has_nick_name();
  if (nick_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    nick_name_ = new ::std::string;
  }
  nick_name_->assign(value);
  // @@protoc_insertion_point(field_set_char:gamer.protocol.PlayerMsgProtocol.nick_name)
}
inline void PlayerMsgProtocol::set_nick_name(const char* value, size_t size) {
  set_has_nick_name();
  if (nick_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    nick_name_ = new ::std::string;
  }
  nick_name_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:gamer.protocol.PlayerMsgProtocol.nick_name)
}
inline ::std::string* PlayerMsgProtocol::mutable_nick_name() {
  set_has_nick_name();
  if (nick_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    nick_name_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:gamer.protocol.PlayerMsgProtocol.nick_name)
  return nick_name_;
}
inline ::std::string* PlayerMsgProtocol::release_nick_name() {
  clear_has_nick_name();
  if (nick_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = nick_name_;
    nick_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void PlayerMsgProtocol::set_allocated_nick_name(::std::string* nick_name) {
  if (nick_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete nick_name_;
  }
  if (nick_name) {
    set_has_nick_name();
    nick_name_ = nick_name;
  } else {
    clear_has_nick_name();
    nick_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:gamer.protocol.PlayerMsgProtocol.nick_name)
}

// required int32 game_currency = 3;
inline bool PlayerMsgProtocol::has_game_currency() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void PlayerMsgProtocol::set_has_game_currency() {
  _has_bits_[0] |= 0x00000004u;
}
inline void PlayerMsgProtocol::clear_has_game_currency() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void PlayerMsgProtocol::clear_game_currency() {
  game_currency_ = 0;
  clear_has_game_currency();
}
inline ::google::protobuf::int32 PlayerMsgProtocol::game_currency() const {
  // @@protoc_insertion_point(field_get:gamer.protocol.PlayerMsgProtocol.game_currency)
  return game_currency_;
}
inline void PlayerMsgProtocol::set_game_currency(::google::protobuf::int32 value) {
  set_has_game_currency();
  game_currency_ = value;
  // @@protoc_insertion_point(field_set:gamer.protocol.PlayerMsgProtocol.game_currency)
}

// required int32 level = 4;
inline bool PlayerMsgProtocol::has_level() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void PlayerMsgProtocol::set_has_level() {
  _has_bits_[0] |= 0x00000008u;
}
inline void PlayerMsgProtocol::clear_has_level() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void PlayerMsgProtocol::clear_level() {
  level_ = 0;
  clear_has_level();
}
inline ::google::protobuf::int32 PlayerMsgProtocol::level() const {
  // @@protoc_insertion_point(field_get:gamer.protocol.PlayerMsgProtocol.level)
  return level_;
}
inline void PlayerMsgProtocol::set_level(::google::protobuf::int32 value) {
  set_has_level();
  level_ = value;
  // @@protoc_insertion_point(field_set:gamer.protocol.PlayerMsgProtocol.level)
}

// required string level_name = 5;
inline bool PlayerMsgProtocol::has_level_name() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void PlayerMsgProtocol::set_has_level_name() {
  _has_bits_[0] |= 0x00000010u;
}
inline void PlayerMsgProtocol::clear_has_level_name() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void PlayerMsgProtocol::clear_level_name() {
  if (level_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    level_name_->clear();
  }
  clear_has_level_name();
}
inline const ::std::string& PlayerMsgProtocol::level_name() const {
  // @@protoc_insertion_point(field_get:gamer.protocol.PlayerMsgProtocol.level_name)
  return *level_name_;
}
inline void PlayerMsgProtocol::set_level_name(const ::std::string& value) {
  set_has_level_name();
  if (level_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    level_name_ = new ::std::string;
  }
  level_name_->assign(value);
  // @@protoc_insertion_point(field_set:gamer.protocol.PlayerMsgProtocol.level_name)
}
inline void PlayerMsgProtocol::set_level_name(const char* value) {
  set_has_level_name();
  if (level_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    level_name_ = new ::std::string;
  }
  level_name_->assign(value);
  // @@protoc_insertion_point(field_set_char:gamer.protocol.PlayerMsgProtocol.level_name)
}
inline void PlayerMsgProtocol::set_level_name(const char* value, size_t size) {
  set_has_level_name();
  if (level_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    level_name_ = new ::std::string;
  }
  level_name_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:gamer.protocol.PlayerMsgProtocol.level_name)
}
inline ::std::string* PlayerMsgProtocol::mutable_level_name() {
  set_has_level_name();
  if (level_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    level_name_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:gamer.protocol.PlayerMsgProtocol.level_name)
  return level_name_;
}
inline ::std::string* PlayerMsgProtocol::release_level_name() {
  clear_has_level_name();
  if (level_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = level_name_;
    level_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void PlayerMsgProtocol::set_allocated_level_name(::std::string* level_name) {
  if (level_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete level_name_;
  }
  if (level_name) {
    set_has_level_name();
    level_name_ = level_name;
  } else {
    clear_has_level_name();
    level_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:gamer.protocol.PlayerMsgProtocol.level_name)
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace protocol
}  // namespace gamer

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_player_5fmsg_5fprotocol_2eproto__INCLUDED
