// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: room_operation_msg_protocol.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "room_operation_msg_protocol.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace gamer {
namespace protocol {

namespace {

const ::google::protobuf::Descriptor* RoomOperationMsgProtocol_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RoomOperationMsgProtocol_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_room_5foperation_5fmsg_5fprotocol_2eproto() {
  protobuf_AddDesc_room_5foperation_5fmsg_5fprotocol_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "room_operation_msg_protocol.proto");
  GOOGLE_CHECK(file != NULL);
  RoomOperationMsgProtocol_descriptor_ = file->message_type(0);
  static const int RoomOperationMsgProtocol_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoomOperationMsgProtocol, player_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoomOperationMsgProtocol, room_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoomOperationMsgProtocol, operation_id_),
  };
  RoomOperationMsgProtocol_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RoomOperationMsgProtocol_descriptor_,
      RoomOperationMsgProtocol::default_instance_,
      RoomOperationMsgProtocol_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoomOperationMsgProtocol, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoomOperationMsgProtocol, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RoomOperationMsgProtocol));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_room_5foperation_5fmsg_5fprotocol_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RoomOperationMsgProtocol_descriptor_, &RoomOperationMsgProtocol::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_room_5foperation_5fmsg_5fprotocol_2eproto() {
  delete RoomOperationMsgProtocol::default_instance_;
  delete RoomOperationMsgProtocol_reflection_;
}

void protobuf_AddDesc_room_5foperation_5fmsg_5fprotocol_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n!room_operation_msg_protocol.proto\022\016gam"
    "er.protocol\"T\n\030RoomOperationMsgProtocol\022"
    "\021\n\tplayer_id\030\001 \002(\005\022\017\n\007room_id\030\002 \002(\005\022\024\n\014o"
    "peration_id\030\003 \002(\005", 137);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "room_operation_msg_protocol.proto", &protobuf_RegisterTypes);
  RoomOperationMsgProtocol::default_instance_ = new RoomOperationMsgProtocol();
  RoomOperationMsgProtocol::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_room_5foperation_5fmsg_5fprotocol_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_room_5foperation_5fmsg_5fprotocol_2eproto {
  StaticDescriptorInitializer_room_5foperation_5fmsg_5fprotocol_2eproto() {
    protobuf_AddDesc_room_5foperation_5fmsg_5fprotocol_2eproto();
  }
} static_descriptor_initializer_room_5foperation_5fmsg_5fprotocol_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int RoomOperationMsgProtocol::kPlayerIdFieldNumber;
const int RoomOperationMsgProtocol::kRoomIdFieldNumber;
const int RoomOperationMsgProtocol::kOperationIdFieldNumber;
#endif  // !_MSC_VER

RoomOperationMsgProtocol::RoomOperationMsgProtocol()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:gamer.protocol.RoomOperationMsgProtocol)
}

void RoomOperationMsgProtocol::InitAsDefaultInstance() {
}

RoomOperationMsgProtocol::RoomOperationMsgProtocol(const RoomOperationMsgProtocol& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:gamer.protocol.RoomOperationMsgProtocol)
}

void RoomOperationMsgProtocol::SharedCtor() {
  _cached_size_ = 0;
  player_id_ = 0;
  room_id_ = 0;
  operation_id_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RoomOperationMsgProtocol::~RoomOperationMsgProtocol() {
  // @@protoc_insertion_point(destructor:gamer.protocol.RoomOperationMsgProtocol)
  SharedDtor();
}

void RoomOperationMsgProtocol::SharedDtor() {
  if (this != default_instance_) {
  }
}

void RoomOperationMsgProtocol::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RoomOperationMsgProtocol::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RoomOperationMsgProtocol_descriptor_;
}

const RoomOperationMsgProtocol& RoomOperationMsgProtocol::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_room_5foperation_5fmsg_5fprotocol_2eproto();
  return *default_instance_;
}

RoomOperationMsgProtocol* RoomOperationMsgProtocol::default_instance_ = NULL;

RoomOperationMsgProtocol* RoomOperationMsgProtocol::New() const {
  return new RoomOperationMsgProtocol;
}

void RoomOperationMsgProtocol::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<RoomOperationMsgProtocol*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(player_id_, operation_id_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RoomOperationMsgProtocol::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:gamer.protocol.RoomOperationMsgProtocol)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 player_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &player_id_)));
          set_has_player_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_room_id;
        break;
      }

      // required int32 room_id = 2;
      case 2: {
        if (tag == 16) {
         parse_room_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &room_id_)));
          set_has_room_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_operation_id;
        break;
      }

      // required int32 operation_id = 3;
      case 3: {
        if (tag == 24) {
         parse_operation_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &operation_id_)));
          set_has_operation_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:gamer.protocol.RoomOperationMsgProtocol)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:gamer.protocol.RoomOperationMsgProtocol)
  return false;
#undef DO_
}

void RoomOperationMsgProtocol::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:gamer.protocol.RoomOperationMsgProtocol)
  // required int32 player_id = 1;
  if (has_player_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->player_id(), output);
  }

  // required int32 room_id = 2;
  if (has_room_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->room_id(), output);
  }

  // required int32 operation_id = 3;
  if (has_operation_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->operation_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:gamer.protocol.RoomOperationMsgProtocol)
}

::google::protobuf::uint8* RoomOperationMsgProtocol::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:gamer.protocol.RoomOperationMsgProtocol)
  // required int32 player_id = 1;
  if (has_player_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->player_id(), target);
  }

  // required int32 room_id = 2;
  if (has_room_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->room_id(), target);
  }

  // required int32 operation_id = 3;
  if (has_operation_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->operation_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:gamer.protocol.RoomOperationMsgProtocol)
  return target;
}

int RoomOperationMsgProtocol::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 player_id = 1;
    if (has_player_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->player_id());
    }

    // required int32 room_id = 2;
    if (has_room_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->room_id());
    }

    // required int32 operation_id = 3;
    if (has_operation_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->operation_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RoomOperationMsgProtocol::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RoomOperationMsgProtocol* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RoomOperationMsgProtocol*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RoomOperationMsgProtocol::MergeFrom(const RoomOperationMsgProtocol& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_player_id()) {
      set_player_id(from.player_id());
    }
    if (from.has_room_id()) {
      set_room_id(from.room_id());
    }
    if (from.has_operation_id()) {
      set_operation_id(from.operation_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RoomOperationMsgProtocol::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RoomOperationMsgProtocol::CopyFrom(const RoomOperationMsgProtocol& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RoomOperationMsgProtocol::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void RoomOperationMsgProtocol::Swap(RoomOperationMsgProtocol* other) {
  if (other != this) {
    std::swap(player_id_, other->player_id_);
    std::swap(room_id_, other->room_id_);
    std::swap(operation_id_, other->operation_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RoomOperationMsgProtocol::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RoomOperationMsgProtocol_descriptor_;
  metadata.reflection = RoomOperationMsgProtocol_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace protocol
}  // namespace gamer

// @@protoc_insertion_point(global_scope)
