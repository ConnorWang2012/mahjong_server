// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: table_msg_protocol.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "table_msg_protocol.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace gamer {
namespace protocol {

namespace {

const ::google::protobuf::Descriptor* TableMsgProtocol_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TableMsgProtocol_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_table_5fmsg_5fprotocol_2eproto() {
  protobuf_AddDesc_table_5fmsg_5fprotocol_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "table_msg_protocol.proto");
  GOOGLE_CHECK(file != NULL);
  TableMsgProtocol_descriptor_ = file->message_type(0);
  static const int TableMsgProtocol_offsets_[12] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TableMsgProtocol, table_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TableMsgProtocol, required_players_num_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TableMsgProtocol, cur_round_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TableMsgProtocol, total_round_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TableMsgProtocol, remain_cards_num_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TableMsgProtocol, banker_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TableMsgProtocol, banker_is_same_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TableMsgProtocol, operating_player_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TableMsgProtocol, operation_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TableMsgProtocol, remain_cards_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TableMsgProtocol, player_cards_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TableMsgProtocol, players_),
  };
  TableMsgProtocol_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TableMsgProtocol_descriptor_,
      TableMsgProtocol::default_instance_,
      TableMsgProtocol_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TableMsgProtocol, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TableMsgProtocol, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TableMsgProtocol));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_table_5fmsg_5fprotocol_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TableMsgProtocol_descriptor_, &TableMsgProtocol::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_table_5fmsg_5fprotocol_2eproto() {
  delete TableMsgProtocol::default_instance_;
  delete TableMsgProtocol_reflection_;
}

void protobuf_AddDesc_table_5fmsg_5fprotocol_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::gamer::protocol::protobuf_AddDesc_player_5fcards_5fmsg_5fprotocol_2eproto();
  ::gamer::protocol::protobuf_AddDesc_player_5fmsg_5fprotocol_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\030table_msg_protocol.proto\022\016gamer.protoc"
    "ol\032\037player_cards_msg_protocol.proto\032\031pla"
    "yer_msg_protocol.proto\"\357\002\n\020TableMsgProto"
    "col\022\020\n\010table_id\030\001 \002(\r\022\034\n\024required_player"
    "s_num\030\002 \002(\r\022\021\n\tcur_round\030\003 \001(\r\022\023\n\013total_"
    "round\030\004 \001(\r\022\030\n\020remain_cards_num\030\005 \001(\r\022\021\n"
    "\tbanker_id\030\006 \001(\r\022\033\n\023banker_is_same_time\030"
    "\007 \001(\r\022\033\n\023operating_player_id\030\010 \001(\r\022\024\n\014op"
    "eration_id\030\t \001(\r\022\024\n\014remain_cards\030\n \003(\r\022<"
    "\n\014player_cards\030\013 \003(\0132&.gamer.protocol.Pl"
    "ayerCardsMsgProtocol\0222\n\007players\030\014 \003(\0132!."
    "gamer.protocol.PlayerMsgProtocol", 472);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "table_msg_protocol.proto", &protobuf_RegisterTypes);
  TableMsgProtocol::default_instance_ = new TableMsgProtocol();
  TableMsgProtocol::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_table_5fmsg_5fprotocol_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_table_5fmsg_5fprotocol_2eproto {
  StaticDescriptorInitializer_table_5fmsg_5fprotocol_2eproto() {
    protobuf_AddDesc_table_5fmsg_5fprotocol_2eproto();
  }
} static_descriptor_initializer_table_5fmsg_5fprotocol_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int TableMsgProtocol::kTableIdFieldNumber;
const int TableMsgProtocol::kRequiredPlayersNumFieldNumber;
const int TableMsgProtocol::kCurRoundFieldNumber;
const int TableMsgProtocol::kTotalRoundFieldNumber;
const int TableMsgProtocol::kRemainCardsNumFieldNumber;
const int TableMsgProtocol::kBankerIdFieldNumber;
const int TableMsgProtocol::kBankerIsSameTimeFieldNumber;
const int TableMsgProtocol::kOperatingPlayerIdFieldNumber;
const int TableMsgProtocol::kOperationIdFieldNumber;
const int TableMsgProtocol::kRemainCardsFieldNumber;
const int TableMsgProtocol::kPlayerCardsFieldNumber;
const int TableMsgProtocol::kPlayersFieldNumber;
#endif  // !_MSC_VER

TableMsgProtocol::TableMsgProtocol()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:gamer.protocol.TableMsgProtocol)
}

void TableMsgProtocol::InitAsDefaultInstance() {
}

TableMsgProtocol::TableMsgProtocol(const TableMsgProtocol& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:gamer.protocol.TableMsgProtocol)
}

void TableMsgProtocol::SharedCtor() {
  _cached_size_ = 0;
  table_id_ = 0u;
  required_players_num_ = 0u;
  cur_round_ = 0u;
  total_round_ = 0u;
  remain_cards_num_ = 0u;
  banker_id_ = 0u;
  banker_is_same_time_ = 0u;
  operating_player_id_ = 0u;
  operation_id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TableMsgProtocol::~TableMsgProtocol() {
  // @@protoc_insertion_point(destructor:gamer.protocol.TableMsgProtocol)
  SharedDtor();
}

void TableMsgProtocol::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TableMsgProtocol::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TableMsgProtocol::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TableMsgProtocol_descriptor_;
}

const TableMsgProtocol& TableMsgProtocol::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_table_5fmsg_5fprotocol_2eproto();
  return *default_instance_;
}

TableMsgProtocol* TableMsgProtocol::default_instance_ = NULL;

TableMsgProtocol* TableMsgProtocol::New() const {
  return new TableMsgProtocol;
}

void TableMsgProtocol::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<TableMsgProtocol*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 255) {
    ZR_(table_id_, operating_player_id_);
  }
  operation_id_ = 0u;

#undef OFFSET_OF_FIELD_
#undef ZR_

  remain_cards_.Clear();
  player_cards_.Clear();
  players_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TableMsgProtocol::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:gamer.protocol.TableMsgProtocol)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 table_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &table_id_)));
          set_has_table_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_required_players_num;
        break;
      }

      // required uint32 required_players_num = 2;
      case 2: {
        if (tag == 16) {
         parse_required_players_num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &required_players_num_)));
          set_has_required_players_num();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_cur_round;
        break;
      }

      // optional uint32 cur_round = 3;
      case 3: {
        if (tag == 24) {
         parse_cur_round:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &cur_round_)));
          set_has_cur_round();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_total_round;
        break;
      }

      // optional uint32 total_round = 4;
      case 4: {
        if (tag == 32) {
         parse_total_round:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &total_round_)));
          set_has_total_round();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_remain_cards_num;
        break;
      }

      // optional uint32 remain_cards_num = 5;
      case 5: {
        if (tag == 40) {
         parse_remain_cards_num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &remain_cards_num_)));
          set_has_remain_cards_num();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_banker_id;
        break;
      }

      // optional uint32 banker_id = 6;
      case 6: {
        if (tag == 48) {
         parse_banker_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &banker_id_)));
          set_has_banker_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_banker_is_same_time;
        break;
      }

      // optional uint32 banker_is_same_time = 7;
      case 7: {
        if (tag == 56) {
         parse_banker_is_same_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &banker_is_same_time_)));
          set_has_banker_is_same_time();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_operating_player_id;
        break;
      }

      // optional uint32 operating_player_id = 8;
      case 8: {
        if (tag == 64) {
         parse_operating_player_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &operating_player_id_)));
          set_has_operating_player_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(72)) goto parse_operation_id;
        break;
      }

      // optional uint32 operation_id = 9;
      case 9: {
        if (tag == 72) {
         parse_operation_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &operation_id_)));
          set_has_operation_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(80)) goto parse_remain_cards;
        break;
      }

      // repeated uint32 remain_cards = 10;
      case 10: {
        if (tag == 80) {
         parse_remain_cards:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 80, input, this->mutable_remain_cards())));
        } else if (tag == 82) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_remain_cards())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(80)) goto parse_remain_cards;
        if (input->ExpectTag(90)) goto parse_player_cards;
        break;
      }

      // repeated .gamer.protocol.PlayerCardsMsgProtocol player_cards = 11;
      case 11: {
        if (tag == 90) {
         parse_player_cards:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_player_cards()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(90)) goto parse_player_cards;
        if (input->ExpectTag(98)) goto parse_players;
        break;
      }

      // repeated .gamer.protocol.PlayerMsgProtocol players = 12;
      case 12: {
        if (tag == 98) {
         parse_players:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_players()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(98)) goto parse_players;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:gamer.protocol.TableMsgProtocol)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:gamer.protocol.TableMsgProtocol)
  return false;
#undef DO_
}

void TableMsgProtocol::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:gamer.protocol.TableMsgProtocol)
  // required uint32 table_id = 1;
  if (has_table_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->table_id(), output);
  }

  // required uint32 required_players_num = 2;
  if (has_required_players_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->required_players_num(), output);
  }

  // optional uint32 cur_round = 3;
  if (has_cur_round()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->cur_round(), output);
  }

  // optional uint32 total_round = 4;
  if (has_total_round()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->total_round(), output);
  }

  // optional uint32 remain_cards_num = 5;
  if (has_remain_cards_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->remain_cards_num(), output);
  }

  // optional uint32 banker_id = 6;
  if (has_banker_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->banker_id(), output);
  }

  // optional uint32 banker_is_same_time = 7;
  if (has_banker_is_same_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->banker_is_same_time(), output);
  }

  // optional uint32 operating_player_id = 8;
  if (has_operating_player_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->operating_player_id(), output);
  }

  // optional uint32 operation_id = 9;
  if (has_operation_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->operation_id(), output);
  }

  // repeated uint32 remain_cards = 10;
  for (int i = 0; i < this->remain_cards_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      10, this->remain_cards(i), output);
  }

  // repeated .gamer.protocol.PlayerCardsMsgProtocol player_cards = 11;
  for (int i = 0; i < this->player_cards_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      11, this->player_cards(i), output);
  }

  // repeated .gamer.protocol.PlayerMsgProtocol players = 12;
  for (int i = 0; i < this->players_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      12, this->players(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:gamer.protocol.TableMsgProtocol)
}

::google::protobuf::uint8* TableMsgProtocol::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:gamer.protocol.TableMsgProtocol)
  // required uint32 table_id = 1;
  if (has_table_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->table_id(), target);
  }

  // required uint32 required_players_num = 2;
  if (has_required_players_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->required_players_num(), target);
  }

  // optional uint32 cur_round = 3;
  if (has_cur_round()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->cur_round(), target);
  }

  // optional uint32 total_round = 4;
  if (has_total_round()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->total_round(), target);
  }

  // optional uint32 remain_cards_num = 5;
  if (has_remain_cards_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->remain_cards_num(), target);
  }

  // optional uint32 banker_id = 6;
  if (has_banker_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->banker_id(), target);
  }

  // optional uint32 banker_is_same_time = 7;
  if (has_banker_is_same_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->banker_is_same_time(), target);
  }

  // optional uint32 operating_player_id = 8;
  if (has_operating_player_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->operating_player_id(), target);
  }

  // optional uint32 operation_id = 9;
  if (has_operation_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(9, this->operation_id(), target);
  }

  // repeated uint32 remain_cards = 10;
  for (int i = 0; i < this->remain_cards_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(10, this->remain_cards(i), target);
  }

  // repeated .gamer.protocol.PlayerCardsMsgProtocol player_cards = 11;
  for (int i = 0; i < this->player_cards_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        11, this->player_cards(i), target);
  }

  // repeated .gamer.protocol.PlayerMsgProtocol players = 12;
  for (int i = 0; i < this->players_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        12, this->players(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:gamer.protocol.TableMsgProtocol)
  return target;
}

int TableMsgProtocol::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 table_id = 1;
    if (has_table_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->table_id());
    }

    // required uint32 required_players_num = 2;
    if (has_required_players_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->required_players_num());
    }

    // optional uint32 cur_round = 3;
    if (has_cur_round()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->cur_round());
    }

    // optional uint32 total_round = 4;
    if (has_total_round()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->total_round());
    }

    // optional uint32 remain_cards_num = 5;
    if (has_remain_cards_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->remain_cards_num());
    }

    // optional uint32 banker_id = 6;
    if (has_banker_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->banker_id());
    }

    // optional uint32 banker_is_same_time = 7;
    if (has_banker_is_same_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->banker_is_same_time());
    }

    // optional uint32 operating_player_id = 8;
    if (has_operating_player_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->operating_player_id());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional uint32 operation_id = 9;
    if (has_operation_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->operation_id());
    }

  }
  // repeated uint32 remain_cards = 10;
  {
    int data_size = 0;
    for (int i = 0; i < this->remain_cards_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->remain_cards(i));
    }
    total_size += 1 * this->remain_cards_size() + data_size;
  }

  // repeated .gamer.protocol.PlayerCardsMsgProtocol player_cards = 11;
  total_size += 1 * this->player_cards_size();
  for (int i = 0; i < this->player_cards_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->player_cards(i));
  }

  // repeated .gamer.protocol.PlayerMsgProtocol players = 12;
  total_size += 1 * this->players_size();
  for (int i = 0; i < this->players_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->players(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TableMsgProtocol::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TableMsgProtocol* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TableMsgProtocol*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TableMsgProtocol::MergeFrom(const TableMsgProtocol& from) {
  GOOGLE_CHECK_NE(&from, this);
  remain_cards_.MergeFrom(from.remain_cards_);
  player_cards_.MergeFrom(from.player_cards_);
  players_.MergeFrom(from.players_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_table_id()) {
      set_table_id(from.table_id());
    }
    if (from.has_required_players_num()) {
      set_required_players_num(from.required_players_num());
    }
    if (from.has_cur_round()) {
      set_cur_round(from.cur_round());
    }
    if (from.has_total_round()) {
      set_total_round(from.total_round());
    }
    if (from.has_remain_cards_num()) {
      set_remain_cards_num(from.remain_cards_num());
    }
    if (from.has_banker_id()) {
      set_banker_id(from.banker_id());
    }
    if (from.has_banker_is_same_time()) {
      set_banker_is_same_time(from.banker_is_same_time());
    }
    if (from.has_operating_player_id()) {
      set_operating_player_id(from.operating_player_id());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_operation_id()) {
      set_operation_id(from.operation_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TableMsgProtocol::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TableMsgProtocol::CopyFrom(const TableMsgProtocol& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TableMsgProtocol::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  if (!::google::protobuf::internal::AllAreInitialized(this->player_cards())) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->players())) return false;
  return true;
}

void TableMsgProtocol::Swap(TableMsgProtocol* other) {
  if (other != this) {
    std::swap(table_id_, other->table_id_);
    std::swap(required_players_num_, other->required_players_num_);
    std::swap(cur_round_, other->cur_round_);
    std::swap(total_round_, other->total_round_);
    std::swap(remain_cards_num_, other->remain_cards_num_);
    std::swap(banker_id_, other->banker_id_);
    std::swap(banker_is_same_time_, other->banker_is_same_time_);
    std::swap(operating_player_id_, other->operating_player_id_);
    std::swap(operation_id_, other->operation_id_);
    remain_cards_.Swap(&other->remain_cards_);
    player_cards_.Swap(&other->player_cards_);
    players_.Swap(&other->players_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TableMsgProtocol::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TableMsgProtocol_descriptor_;
  metadata.reflection = TableMsgProtocol_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace protocol
}  // namespace gamer

// @@protoc_insertion_point(global_scope)
